{"version":3,"sources":["../../../src/modules/raspberries/raspberriesManager.server.js"],"names":["isVisibleForUser","getById","getByIdForUser","getByMac","getAll","screenshotPath","setOnline","update","setOffline","changeScreenshot","raspberriesClientsConnected","raspberriesClientsDisonnected","changeConfig","add","sendAction","data","UserType","logger","map","Map","mapByMac","items","forEach","item","raspberry","id","registered","online","ip","set","macAddresses","mac","has","Error","user","userId","owner","organisation","emailDomains","includes","get","Array","from","values","filter","bind","configTime","info","callback","unknownMac","warn","updating","Object","assign","config","time","screenState","nextExpectedScreenState","delete","screenshot","Buffer","saveScreenshot","Date","now","TIME_OUTDATED","intervalUpdateData","lastUpdated","userIds","incMap","key","current","decMap","userEmailDomains","requestUpdate","keys","v","debug","setInterval","size","clearInterval","log","newConfig","name","addOrReplace","replaceId","existing","replaceMacAddresses","addMacAddress","addNew","action"],"mappings":"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","file":"raspberriesManager.server.js","sourcesContent":["import Logger from 'nightingale';\nimport type { UserType } from 'alp-auth/types';\nimport * as data from './raspberriesData.server';\nimport { updateFromAction } from './raspberryActionManager';\nimport {\n  emit as emitToRaspberryClient,\n  broadcastToRoom as broadcastToRoomRaspberryClients,\n  registerRaspberry as registerRaspberryClient,\n} from './websocket/raspberryClient.server';\nimport { broadcastAction as raspberriesBroadcastAction } from './websocket/raspberries.server';\nimport type { RaspberryConfigType, RaspberryDataType, RaspberryType } from './types';\nimport {\n  add as addAction,\n  update as updateAction,\n  remove as removeAction,\n  screenshotUpdated as screenshotUpdatedAction,\n} from './actions/raspberry';\n\nconst logger = new Logger('app.raspberriesManager');\nconst map = new Map();\nconst mapByMac = new Map();\n\ndata.items.forEach((item: ?RaspberryDataType) => {\n  const raspberry = {\n    id: item.id,\n    data: item,\n    registered: true,\n    online: false,\n    ip: null,\n  };\n\n  map.set(item.id, raspberry);\n  item.macAddresses.forEach((mac: string) => {\n    if (mapByMac.has(mac)) {\n      throw new Error(`Mac defined more than one: ${mac}`);\n    }\n\n    mapByMac.set(mac, raspberry);\n  });\n});\n\nexport function isVisibleForUser(user: UserType, raspberry: RaspberryType): boolean {\n  if (!raspberry.data) return raspberry.userId === user.id;\n  return !!(\n    raspberry.data.owner === user.id || (\n      raspberry.data.organisation && user.emailDomains.includes(raspberry.data.organisation)\n    )\n  );\n}\n\nexport function getById(id: string): ?RaspberryType {\n  return map.get(id);\n}\n\nexport function getByIdForUser(user: UserType, id: string): ?RaspberryType {\n  const raspberry = map.get(id);\n  if (!raspberry || !isVisibleForUser(user, raspberry)) return null;\n  return raspberry;\n}\n\nexport function getByMac(mac: string): ?RaspberryType {\n  return mapByMac.get(mac);\n}\n\nexport function getAll(user: UserType): Array<RaspberryType> {\n  return Array.from(map.values()).filter(isVisibleForUser.bind(null, user));\n}\n\nexport function screenshotPath(id: string): string {\n  return data.screenshotPath(id);\n}\n\n/* FROM raspberry clients */\n\nexport function setOnline(\n  mac: string,\n  userId: ?string,\n  configTime: ?number,\n  info,\n  callback: Function,\n): ?RaspberryDataType {\n  let raspberry = getByMac(mac);\n  let unknownMac = false;\n  if (!raspberry) {\n    unknownMac = true;\n    logger.warn('unknown mac, adding', { mac });\n    raspberry = { id: mac };\n    map.set(raspberry.id, raspberry);\n    mapByMac.set(mac, raspberry);\n\n    if (!userId) {\n      logger.warn('new raspberry without owner');\n    } else {\n      raspberry.userId = userId;\n    }\n  } else {\n    logger.info('raspberry online', { mac });\n    if (raspberry.updating) {\n      raspberry.updating = false;\n    }\n  }\n\n  raspberry.online = mac;\n  Object.assign(raspberry, info);\n\n  raspberriesBroadcastAction(\n    raspberry,\n    unknownMac ? addAction(raspberry) : updateAction(raspberry),\n  );\n\n  if (raspberry.data) {\n    if (raspberry.data.config.time !== configTime) {\n      emitToRaspberryClient(raspberry.online, 'changeConfig', raspberry.data.config);\n    }\n\n    callback(raspberry.data);\n  }\n}\n\nexport function update(mac: string, info) {\n  let raspberry = getByMac(mac);\n  if (!raspberry) {\n    // should not happen...\n    return;\n  }\n\n  if (info.screenState && raspberry.nextExpectedScreenState === info.screenState) {\n    raspberry.nextExpectedScreenState = null;\n  }\n\n  Object.assign(raspberry, info);\n  raspberriesBroadcastAction(raspberry, updateAction(raspberry));\n}\n\nexport function setOffline(mac: string) {\n  const raspberry = getByMac(mac);\n  if (!raspberry) {\n    // should not happen...\n    return;\n  }\n\n  if (!raspberry.data) {\n    map.delete(mac);\n    mapByMac.delete(mac);\n    raspberriesBroadcastAction(raspberry, removeAction(raspberry));\n  } else {\n    Object.assign(raspberry, {\n      online: false,\n      // keep last known ip\n    });\n\n    raspberriesBroadcastAction(raspberry, updateAction(raspberry));\n  }\n}\n\nexport function changeScreenshot(mac: string, screenshot: Buffer) {\n  const raspberry = getByMac(mac);\n  if (!raspberry) {\n    logger.warn('changeScreenshot, no raspberry', { mac });\n    // should not happen...\n    return;\n  }\n\n  data.saveScreenshot(raspberry.id, screenshot);\n  raspberriesBroadcastAction(raspberry, screenshotUpdatedAction(raspberry.id, Date.now()));\n}\n\n/* FROM browser clients */\n\nconst TIME_OUTDATED = 10000;\nlet intervalUpdateData;\nlet lastUpdated = Date.now() - TIME_OUTDATED;\n\nconst userIds = new Map();\nconst emailDomains = new Map();\n\nconst incMap = (map: Map, key: any) => {\n  const current = map.get(key) || 0;\n  map.set(key, current + 1);\n};\n\nconst decMap = (map: Map, key: any) => {\n  const current = map.get(key) || 0;\n  if (current === 1) {\n    map.delete(key);\n  } else {\n    map.set(key, current - 1);\n  }\n};\n\nexport function raspberriesClientsConnected(userId: string, userEmailDomains: Array<string>) {\n  const now = Date.now();\n\n  incMap(userIds, userId);\n  userEmailDomains.forEach(incMap.bind(null, emailDomains));\n\n  if (intervalUpdateData) {\n    return;\n  }\n\n  logger.info('update data: start interval');\n\n  const requestUpdate = () => {\n    logger.info('update data', { userIds, emailDomains });\n    [userIds, emailDomains].forEach(map => (\n      Array.from(map.keys()).forEach(v => broadcastToRoomRaspberryClients(v, 'screenshot'))\n    ));\n    lastUpdated = now;\n  };\n\n  if (lastUpdated > now - TIME_OUTDATED) {\n    logger.debug('not outdated');\n  } else {\n    requestUpdate();\n  }\n\n  intervalUpdateData = setInterval(requestUpdate, TIME_OUTDATED);\n}\n\nexport function raspberriesClientsDisonnected(userId: string, userEmailDomains: Array<string>) {\n  decMap(userIds, userId);\n  userEmailDomains.forEach(decMap.bind(null, emailDomains));\n  if (!userIds.size && !emailDomains.size && intervalUpdateData) {\n    logger.info('stop interval');\n    clearInterval(intervalUpdateData);\n  }\n}\n\nexport function changeConfig(raspberry: RaspberryType, config: RaspberryConfigType) {\n  logger.log('changeConfig', { id: raspberry.id, config });\n  if (!raspberry.registered) {\n    logger.warn('raspberry not registered', { id: raspberry.id });\n    return;\n  }\n\n  const newConfig = data.changeConfig(raspberry.id, config);\n  emitToRaspberryClient(raspberry.online, 'changeConfig', newConfig);\n  return newConfig;\n}\n\nexport function add(id: string, userId: string, { name, addOrReplace, id: replaceId }) {\n  logger.log('add', { id, name, addOrReplace, replaceId });\n  const raspberry = getById(id);\n  if (!raspberry) {\n    logger.warn('unknown raspberry', { id });\n    return;\n  } else if (raspberry.registered) {\n    logger.warn('raspberry already registered', { id });\n    return;\n  } else if (!raspberry.online) {\n    logger.warn('raspberry not online', { id });\n  }\n\n\n  if (addOrReplace) {\n    mapByMac.delete(raspberry.online);\n    map.delete(id);\n    const existing = getById(replaceId);\n    if (!existing) {\n      logger.warn('existing not found', { replaceId });\n      return;\n    }\n\n    if (existing.data.owner !== userId) {\n      logger.warn('existing owner different', { replaceId, owner: existing.data.owner, userId });\n      return;\n    }\n\n    if (addOrReplace === 'replace') {\n      existing.data.macAddresses.forEach(mac => mapByMac.delete(mac));\n      data.replaceMacAddresses(existing.id, [raspberry.online]);\n    } else {\n      data.addMacAddress(existing.id, raspberry.online);\n    }\n    mapByMac.set(id, existing);\n    existing.online = raspberry.online;\n    existing.ip = raspberry.ip;\n    existing.screenState = raspberry.screenState;\n\n    registerRaspberryClient(existing);\n    return existing;\n  } else {\n    raspberry.registered = true;\n    raspberry.data = data.addNew(raspberry.id, userId, [raspberry.online], name);\n  }\n\n  registerRaspberryClient(raspberry);\n\n  return raspberry;\n}\n\nexport function sendAction(raspberry: RaspberryType, action: string): boolean {\n  if (!raspberry || !raspberry.registered) {\n    logger.warn('unknown raspberry', { raspberry });\n    // should not happen...\n    return false;\n  }\n\n  Object.assign(raspberry, updateFromAction(action));\n  emitToRaspberryClient(raspberry.online, 'action', action);\n  return true;\n}\n"]}