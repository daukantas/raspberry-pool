{"version":3,"sources":["../../../../src/modules/raspberries/websocket/raspberries.server.js"],"names":["init","broadcastAction","raspberriesManager","logger","clientsCount","clientNs","io","of","socket","onConnection","action","info","to","raspberriesClientsConnected","on","raspberriesClientsDisonnected","getAll","id","config","callback","newConfig","changeConfig","raspberry","getById","broadcast","ids","forEach","sendAction","mac","newRaspberry","add"],"mappings":";;;;;kBAWwBA,I;QAIRC,e,GAAAA,e;;;;;;AAfhB;;IAAYC,kB;;AACZ;;;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMC,SAAS,0BAAW,2BAAX,CAAf;;AAEA,IAAIC,eAAe,CAAnB;AACA,IAAIC,QAAJ;;AAEe,SAASL,IAAT,CAAcM,EAAd,EAAkB;AAC7BD,eAAWC,GAAGC,EAAH,CAAM,QAAN,EAAgBC,UAAUC,aAAaD,MAAb,CAA1B,CAAX;AACH;;AAEM,SAASP,eAAT,CAAyBS,MAAzB,EAAyC;AAAA,YAAhBA,MAAgB;;AAC5CP,WAAOQ,IAAP,CAAY,WAAZ,EAAyBD,MAAzB;AACA,mCAAWL,SAASO,EAAT,CAAY,aAAZ,CAAX,EAAuCF,MAAvC;AACH;;AAED,SAASD,YAAT,CAAsBD,MAAtB,EAA8B;AAC1B,QAAIJ,mBAAmB,CAAvB,EAA0B;AACtBF,2BAAmBW,2BAAnB;AACH;AACDV,WAAOQ,IAAP,CAAY,WAAZ,EAAyB,EAAEP,YAAF,EAAzB;;AAEAI,WAAOM,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1B,YAAI,EAAEV,YAAF,KAAmB,CAAvB,EAA0B;AACtBF,+BAAmBa,6BAAnB;AACH;AACDZ,eAAOQ,IAAP,CAAY,cAAZ,EAA4B,EAAEP,YAAF,EAA5B;AACH,KALD;;AAOA,iCAAUI,MAAV,EAAkB,aAAlB,EAAiC,MAAM,0BAAUN,mBAAmBc,MAAnB,EAAV,CAAvC;;AAEAR,WAAOM,EAAP,CAAU,wBAAV,EAAoC,CAACG,EAAD,EAAKC,MAAL,EAAaC,QAAb,KAA0B;AAC1D,cAAMC,YAAYlB,mBAAmBmB,YAAnB,CAAgCJ,EAAhC,EAAoCC,MAApC,CAAlB;AACA,YAAI,CAACE,SAAL,EAAgB;AACZD,qBAAS,mBAAT;AACH,SAFD,MAEO;AACHA,qBAAS,IAAT,EAAeC,SAAf;AACA,kBAAME,YAAYpB,mBAAmBqB,OAAnB,CAA2BN,EAA3B,CAAlB;AACA,2CAAWT,OAAOgB,SAAP,CAAiBZ,EAAjB,CAAoB,aAApB,CAAX,EAA+C,6BAAaU,SAAb,EAAwBF,SAAxB,CAA/C;AACH;AACJ,KATD;;AAWAZ,WAAOM,EAAP,CAAU,sBAAV,EAAkC,CAACW,GAAD,EAAMf,MAAN,EAAcS,QAAd,KAA2B;AACzDhB,eAAOQ,IAAP,CAAY,sBAAZ,EAAoC,EAAEc,GAAF,EAAOf,MAAP,EAApC;AACAe,YAAIC,OAAJ,CAAYT,MAAM;AACd,kBAAMK,YAAYpB,mBAAmByB,UAAnB,CAA8BV,EAA9B,EAAkCP,MAAlC,CAAlB;AACA,gBAAIY,SAAJ,EAAe;AACX,+CAAWd,OAAOgB,SAAP,CAAiBZ,EAAjB,CAAoB,aAApB,CAAX,EAA+C,uBAAOU,SAAP,CAA/C;AACH;AACJ,SALD;AAMAH;AACH,KATD;;AAWAX,WAAOM,EAAP,CAAU,2BAAV,EAAuC,CAACc,GAAD,EAAMjB,IAAN,EAAYQ,QAAZ,KAAyB;AAC5DhB,eAAOQ,IAAP,CAAY,oBAAZ,EAAkC,EAAEiB,GAAF,EAAOjB,IAAP,EAAlC;AACA,cAAMkB,eAAe3B,mBAAmB4B,GAAnB,CAAuBF,GAAvB,EAA4BjB,IAA5B,CAArB;AACA,YAAI,CAACkB,YAAL,EAAmB;AACfV,qBAAS,IAAT,EAAe,KAAf;AACH,SAFD,MAEO;AACHA,qBAAS,IAAT,EAAeU,YAAf;AACA,2CAAWrB,OAAOgB,SAAP,CAAiBZ,EAAjB,CAAoB,aAApB,CAAX,EAA+C,uBAAOiB,YAAP,CAA/C;AACH;AACJ,KATD;AAUH","file":"raspberries.server.js","sourcesContent":["import * as raspberriesManager from '../raspberriesManager.server';\nimport Logger from 'nightingale';\nimport { updateAll, update, updateConfig } from '../actions/raspberry';\nimport { emitAction } from 'alp-react-redux';\nimport { subscribe } from 'alp-websocket';\n\nconst logger = new Logger('app.websocket.raspberries');\n\nlet clientsCount = 0;\nlet clientNs;\n\nexport default function init(io) {\n    clientNs = io.of('client', socket => onConnection(socket));\n}\n\nexport function broadcastAction(action: Object) {\n    logger.info('broadcast', action);\n    emitAction(clientNs.to('raspberries'), action);\n}\n\nfunction onConnection(socket) {\n    if (clientsCount++ === 0) {\n        raspberriesManager.raspberriesClientsConnected();\n    }\n    logger.info('connected', { clientsCount });\n\n    socket.on('disconnect', () => {\n        if (--clientsCount === 0) {\n            raspberriesManager.raspberriesClientsDisonnected();\n        }\n        logger.info('disconnected', { clientsCount });\n    });\n\n    subscribe(socket, 'raspberries', () => updateAll(raspberriesManager.getAll()));\n\n    socket.on('raspberry:changeConfig', (id, config, callback) => {\n        const newConfig = raspberriesManager.changeConfig(id, config);\n        if (!newConfig) {\n            callback('unknown raspberry');\n        } else {\n            callback(null, newConfig);\n            const raspberry = raspberriesManager.getById(id);\n            emitAction(socket.broadcast.to('raspberries'), updateConfig(raspberry, newConfig));\n        }\n    });\n\n    socket.on('raspberry:sendAction', (ids, action, callback) => {\n        logger.info('sendAction raspberry', { ids, action });\n        ids.forEach(id => {\n            const raspberry = raspberriesManager.sendAction(id, action);\n            if (raspberry) {\n                emitAction(socket.broadcast.to('raspberries'), update(raspberry));\n            }\n        });\n        callback();\n    });\n\n    socket.on('raspberry:registerUnknown', (mac, info, callback) => {\n        logger.info('register raspberry', { mac, info });\n        const newRaspberry = raspberriesManager.add(mac, info);\n        if (!newRaspberry) {\n            callback(null, false);\n        } else {\n            callback(null, newRaspberry);\n            emitAction(socket.broadcast.to('raspberries'), update(newRaspberry));\n        }\n    });\n}\n"]}