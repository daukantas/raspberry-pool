{"version":3,"sources":["../../../../src/modules/raspberries/websocket/raspberryClient.server.js"],"names":["emit","broadcast","init","raspberriesManager","logger","MIN_SUPPORTED_VERSION","clients","Map","mac","eventName","data","debug","has","warn","get","forEach","socket","io","of","onConnection","info","clientMac","on","delete","setOffline","version","configTime","ip","screenState","set","setOnline","callback","buffer","changeScreenshot","patch","key","hasOwnProperty","update"],"mappings":"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","file":"raspberryClient.server.js","sourcesContent":["import Logger from 'nightingale';\nimport * as raspberriesManager from '../raspberriesManager.server';\nimport { lt as semverLt } from 'semver';\n\nconst logger = new Logger('app.websocket.raspberryClient');\nconst MIN_SUPPORTED_VERSION = '4.1.0';\nconst clients = new Map();\n\n\nexport function emit(mac, eventName: string, ...data?: Array<any>) {\n    logger.debug('emit', { mac, data });\n    if (!clients.has(mac)) {\n        logger.warn('cannot send message');\n        return;\n    }\n    clients.get(mac).emit(eventName, ...data);\n}\n\nexport function broadcast(eventName: string, ...data?: Array<any>) {\n    clients.forEach(socket => socket.emit(eventName, ...data));\n}\n\n\nexport default function init(io) {\n    io.of('raspberry-client', socket => onConnection(socket));\n}\n\nfunction onConnection(socket) {\n    logger.info('client connected');\n    let clientMac;\n\n    socket.on('disconnect', () => {\n        logger.info('client disconnected');\n        if (clientMac && clients.get(clientMac) === socket) {\n            clients.delete(clientMac);\n\n            raspberriesManager.setOffline(clientMac);\n        }\n        clientMac = null;\n    });\n\n    socket.on('hello', ({ mac, version, configTime, ip, screenState }) => {\n        logger.info('received hello', { mac, version, configTime, ip, screenState });\n\n        if (clientMac) {\n            logger.warn('already have clientMac');\n            return;\n        }\n\n        if (!version || semverLt(version, MIN_SUPPORTED_VERSION)) {\n            socket.emit('selfUpdate');\n            return;\n        }\n\n\n        clientMac = mac;\n        clients.set(mac, socket);\n\n        raspberriesManager.setOnline(mac, configTime, { ip, screenState });\n    });\n\n    socket.on('screenshot', ({ buffer }, callback) => {\n        logger.info('got screenshot');\n        raspberriesManager.changeScreenshot(clientMac, buffer); // non async method\n        callback();\n    });\n\n    socket.on('update', data => {\n        logger.info('received update', data);\n\n        const patch = {};\n        ['screenState', 'updating'].forEach(key => {\n            if (data.hasOwnProperty(key)) {\n                patch[key] = data[key];\n            }\n        });\n\n        raspberriesManager.update(clientMac, patch);\n    });\n}\n"]}