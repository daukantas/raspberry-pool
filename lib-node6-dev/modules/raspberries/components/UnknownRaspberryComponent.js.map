{"version":3,"sources":["../../../../src/modules/raspberries/components/UnknownRaspberryComponent.jsx"],"names":["UnknownRaspberryComponent","constructor","props","shouldComponentUpdate","state","render","raspberry","registerUnknown","offlineRaspberries","online","saving","ip","name","undefined","e","setState","target","value","id","length","addOrReplace","map","r","data","propTypes","object","isRequired","array","func","sendAction"],"mappings":"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","file":"UnknownRaspberryComponent.jsx","sourcesContent":["import { Component, PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport Spinner from '../../common/components/SpinnerComponent';\nimport T from 'react-alp-translate';\n\nexport default class UnknownRaspberryComponent extends Component {\n    static propTypes = {\n        raspberry: PropTypes.object.isRequired,\n        offlineRaspberries: PropTypes.array.isRequired,\n        registerUnknown: PropTypes.func.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberry, registerUnknown, offlineRaspberries } = this.props;\n\n        return (<div className=\"raspberry unknown\">\n            <h2 className=\"text-title\">{raspberry.online}</h2>\n            <Spinner active={raspberry.saving} />\n            <span className={'status label'}>{raspberry.ip}</span>\n\n\n            <div className=\"row row-responsive spaced\">\n                <div className=\"col wp-50\">\n                    <div className=\"text-paragraph-title\"><T key=\"unknownRaspberry.title\" /></div>\n                    <div className=\"input text\">\n                        <input\n                            type=\"text\"\n                            required\n                            autoComplete=\"off\"\n                            className={`${this.state.name === undefined ? '' : `has-value${this.state.name ? '' : ' has-empty-value'}`}`}\n                            value={this.state.name}\n                            onChange={(e) => this.setState({ name: e.target.value })}\n                        />\n                        <label htmlFor={`raspberry-url-${raspberry.id}`}>Name</label>\n                    </div>\n                </div>\n                {!offlineRaspberries.length ? '' :\n                    <div className=\"col wp-50\">\n                        <div className=\"text-paragraph-title\"><T key=\"unknownRaspberry.addToExisting\" /></div>\n                        <div className=\"input radio\">\n                            <input\n                                id={`add-raspberry-${raspberry.id}`}\n                                name=\"addOrReplace\"\n                                type=\"radio\"\n                                defaultChecked\n                                value=\"add\"\n                                onChange={(e) => this.setState({ addOrReplace: e.target.value })}\n                            />\n                            <label htmlFor={`add-raspberry-${raspberry.id}`}><T key=\"unknownRaspberry.add\" /></label>\n                        </div>\n                        <div className=\"input radio\">\n                            <input\n                                id={`replace-raspberry-${raspberry.id}`}\n                                name=\"addOrReplace\"\n                                type=\"radio\"\n                                value=\"replace\"\n                                onChange={(e) => this.setState({ addOrReplace: e.target.value })}\n                            />\n                            <label htmlFor={`replace-raspberry-${raspberry.id}`}><T key=\"unknownRaspberry.replace\" /></label>\n                        </div>\n                        <select name=\"raspberry\" onChange={(e) => this.setState({ id: e.target.value })}>\n                            {!this.state.id && <option key=\"__empty\"></option>}\n                            {offlineRaspberries.map(r => <option key={r.id} value={r.id}>{r.data.name}</option>)}\n                        </select>\n                    </div>\n                }\n            </div>\n\n            <div className=\"button-container center\">\n                <button\n                    type=\"button\"\n                    disabled={!(this.state.name || this.state.id) || !!raspberry.saving}\n                    onClick={() => {\n                        registerUnknown(raspberry, {\n                            name: this.state.name,\n                            id: this.state.id,\n                            addOrReplace: this.state.addOrReplace || (this.state.id && 'add'),\n                        });\n                    }}\n                >\n                    Add\n                </button>\n            </div>\n        </div>);\n        /*\n                <button type=\"button\" onClick={() => {\n                    sendAction(raspberry, 'blink');\n                    this.setState({ urlChanged: false });\n                }}>Blink</button>\n        */\n    }\n}\n"]}