{"version":3,"sources":["../../src/websocket/index.browser.js"],"names":["init","isConnected","emit","on","off","logger","socket","app","disconnected","document","getElementById","style","display","connected","eventName","args","debug","type","handler"],"mappings":";;;;;QAOgBA,I,GAAAA,I;QAkBAC,W,GAAAA,W;QAIAC,I,GAAAA,I;QAKAC,E,GAAAA,E;QAKAC,G,GAAAA,G;;AAtChB;;;;AACA;;;;;;AAFA;AAIA,MAAMC,SAAS,0BAAW,eAAX,CAAf;AACA,IAAIC,MAAJ;;AAEO,SAASN,IAAT,CAAcO,GAAd,EAAmB;AACxBD,WAAS,4BAAUC,GAAV,EAAe,QAAf,CAAT;;AAEAD,SAAOH,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB,UAAMK,eAAeC,SAASC,cAAT,CAAwB,cAAxB,CAArB;AACA,QAAIF,YAAJ,EAAkB;AAChBA,mBAAaG,KAAb,CAAmBC,OAAnB,GAA6B,MAA7B;AACD;AACF,GALD;;AAOAN,SAAOH,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5B,UAAMK,eAAeC,SAASC,cAAT,CAAwB,cAAxB,CAArB;AACA,QAAIF,YAAJ,EAAkB;AAChBA,mBAAaG,KAAb,CAAmBC,OAAnB,GAA6B,OAA7B;AACD;AACF,GALD;AAMD;;AAEM,SAASX,WAAT,GAAuB;AAC5B,SAAOK,UAAUA,OAAOO,SAAxB;AACD;;AAEM,SAASX,IAAT,CAAcY,SAAd,EAA0C;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAC/CV,SAAOW,KAAP,CAAa,MAAb,EAAqB,EAAEF,SAAF,EAAaC,IAAb,EAArB;AACA,SAAOT,OAAOJ,IAAP,CAAYY,SAAZ,EAAuB,GAAGC,IAA1B,CAAP;AACD;;AAEM,SAASZ,EAAT,CAAYc,IAAZ,EAAkBC,OAAlB,EAA2B;AAChCZ,SAAOH,EAAP,CAAUc,IAAV,EAAgBC,OAAhB;AACA,SAAOA,OAAP;AACD;;AAEM,SAASd,GAAT,CAAaa,IAAb,EAAmBC,OAAnB,EAA4B;AACjCZ,SAAOF,GAAP,CAAWa,IAAX,EAAiBC,OAAjB;AACD","file":"index.browser.js","sourcesContent":["/* global document */\nimport websocket from 'alp-websocket';\nimport Logger from 'nightingale';\n\nconst logger = new Logger('app:websocket');\nlet socket;\n\nexport function init(app) {\n  socket = websocket(app, 'client');\n\n  socket.on('connect', () => {\n    const disconnected = document.getElementById('disconnected');\n    if (disconnected) {\n      disconnected.style.display = 'none';\n    }\n  });\n\n  socket.on('disconnect', () => {\n    const disconnected = document.getElementById('disconnected');\n    if (disconnected) {\n      disconnected.style.display = 'block';\n    }\n  });\n}\n\nexport function isConnected() {\n  return socket && socket.connected;\n}\n\nexport function emit(eventName: string, ...args) {\n  logger.debug('emit', { eventName, args });\n  return socket.emit(eventName, ...args);\n}\n\nexport function on(type, handler) {\n  socket.on(type, handler);\n  return handler;\n}\n\nexport function off(type, handler) {\n  socket.off(type, handler);\n}\n"]}