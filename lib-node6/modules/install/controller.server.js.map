{"version":3,"sources":["../../../src/modules/install/controller.server.js"],"names":["moduleDescriptor","installScriptsDir","__dirname","date","Date","CONFIG_PLACEHOLDER","scripts","Map","filter","filename","endsWith","map","slice","toString","index","ctx","websocketPort","app","config","get","render","hostname","request","origin","script","assert","method","scriptName","route","namedParams","scriptBody","set","toUTCString","replace","body"],"mappings":";;;;;;AAAA;;AACA;;AACA;;IAAYA,gB;;;;AAEZ,MAAMC,oBAAqB,IAAEC,SAAU,6BAAvC;AACA,MAAMC,OAAO,IAAIC,IAAJ,EAAb;AACA,MAAMC,qBAAqB,6CAA3B;;AAEA,MAAMC,UAAU,IAAIC,GAAJ,CACd,qBAAYN,iBAAZ,EACGO,MADH,CACUC,YAAYA,SAASC,QAAT,CAAkB,KAAlB,CADtB,EAEGC,GAFH,CAEOF,YAAY,CAACA,SAASG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,EAAwB,sBAAc,IAAEX,iBAAkB,KAAEQ,QAAS,GAA7C,EAAgDI,QAAhD,EAAxB,CAFnB,CADc,CAAhB;;kBAMe,wBAAc;AAC3BC,QAAMC,GAAN,EAAW;AACT,UAAMC,gBAAgBD,IAAIE,GAAJ,CAAQC,MAAR,CAAeC,GAAf,CAAmB,WAAnB,EAAgCA,GAAhC,CAAoC,MAApC,CAAtB;AACAJ,QAAIK,MAAJ,CAAWpB,gBAAX,EAA6B,EAAEqB,UAAUN,IAAIO,OAAJ,CAAYC,MAAxB,EAAgCP,aAAhC,EAA7B;AACD,GAJ0B;;AAM3BQ,SAAOT,GAAP,EAAY;AACVA,QAAIU,MAAJ,CAAWV,IAAIW,MAAJ,KAAe,MAAf,IAAyBX,IAAIW,MAAJ,KAAe,KAAnD,EAA0D,GAA1D;AACA,UAAMC,aAAaZ,IAAIa,KAAJ,CAAUC,WAAV,CAAsBV,GAAtB,CAA0B,YAA1B,CAAnB;AACA,QAAIW,aAAaxB,QAAQa,GAAR,CAAYQ,UAAZ,CAAjB;AACAZ,QAAIU,MAAJ,CAAWK,UAAX,EAAuB,GAAvB;AACAf,QAAIgB,GAAJ,CAAQ,eAAR,EAAyB5B,KAAK6B,WAAL,EAAzB;;AAEA,QAAIL,eAAe,mBAAnB,EAAwC;AACtCG,mBAAaA,WAAWG,OAAX,CAAmB5B,kBAAnB,EAAwC,SAAOU,IAAIO,OAAJ,CAAYC,MAAO,qBAAlE,CAAb;AACD,KAFD,MAEO,IAAII,eAAe,gBAAnB,EAAqC;AAC1CG,mBAAaA,WAAWG,OAAX,CACX5B,kBADW,EAEV,qBAAmBU,IAAIO,OAAJ,CAAYC,MAAO,oBAAiBR,IAAIE,GAAJ,CAAQC,MAAR,CAAeC,GAAf,CAAmB,WAAnB,EAAgCA,GAAhC,CAAoC,MAApC,CAA4C,GAFzF,CAAb;AAID;;AAEDJ,QAAImB,IAAJ,GAAWJ,UAAX;AACD;AAvB0B,CAAd,C","file":"controller.server.js","sourcesContent":["import { newController } from 'alp';\nimport { readdirSync, readFileSync } from 'fs';\nimport * as moduleDescriptor from './descriptor';\n\nconst installScriptsDir = `${__dirname}/../../../install-scripts/`;\nconst date = new Date();\nconst CONFIG_PLACEHOLDER = '### SERVER CONFIG WILL BE INJECTED HERE ###';\n\nconst scripts = new Map(\n  readdirSync(installScriptsDir)\n    .filter(filename => filename.endsWith('.sh'))\n    .map(filename => [filename.slice(0, -3), readFileSync(`${installScriptsDir}${filename}`).toString()]),\n);\n\nexport default newController({\n  index(ctx) {\n    const websocketPort = ctx.app.config.get('webSocket').get('port');\n    ctx.render(moduleDescriptor, { hostname: ctx.request.origin, websocketPort });\n  },\n\n  script(ctx) {\n    ctx.assert(ctx.method === 'HEAD' || ctx.method === 'GET', 405);\n    const scriptName = ctx.route.namedParams.get('scriptName');\n    let scriptBody = scripts.get(scriptName);\n    ctx.assert(scriptBody, 404);\n    ctx.set('Last-Modified', date.toUTCString());\n\n    if (scriptName === 'install-raspberry') {\n      scriptBody = scriptBody.replace(CONFIG_PLACEHOLDER, `URL=\"${ctx.request.origin}/install-scripts/\"`);\n    } else if (scriptName === 'install-client') {\n      scriptBody = scriptBody.replace(\n        CONFIG_PLACEHOLDER,\n        `SERVER_HOSTNAME=\"${ctx.request.origin}\"\\nSERVER_PORT=${ctx.app.config.get('webSocket').get('port')}`,\n      );\n    }\n\n    ctx.body = scriptBody;\n  },\n});\n"]}