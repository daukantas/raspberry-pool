{"version":3,"sources":["../../../src/modules/raspberries/raspberriesData.server.js"],"names":["getById","changeConfig","addNew","replaceMacAddresses","addMacAddress","saveScreenshot","screenshotPath","dataPath","__dirname","dataFilename","items","JSON","parse","map","Map","item","id","size","length","Error","save","stringify","get","config","has","Object","assign","time","Date","now","display","url","trim","owner","macAddresses","name","newRaspberryItem","push","set","newMacAddresses","newMacAddress","screenshot"],"mappings":"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","file":"raspberriesData.server.js","sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\nimport type { RaspberryDataType, RaspberryConfigType } from './types';\n/* import { slugify as _slugify } from 'transliteration';\n\nfunction slugify(string) {\n    return _slugify(string, { lowercase: true, separator: '-' });\n} */\n\nconst dataPath = `${__dirname}/../../../data`;\nconst dataFilename = `${dataPath}/raspberries.json`;\n\nexport const items: Array<RaspberryDataType> = JSON.parse(readFileSync(dataFilename));\nconst map = new Map(items.map(item => [item.id, item]));\n\nif (map.size !== items.length) {\n  throw new Error('Duplicated id');\n}\n\nfunction save() {\n  writeFileSync(dataFilename, JSON.stringify(items, null, 4));\n}\n\nexport function getById(id: string): ?RaspberryDataType {\n  return map.get(id);\n}\n\nexport function changeConfig(id: string, config: RaspberryConfigType) {\n  if (!map.has(id)) {\n    throw new Error('Invalid id');\n  }\n\n    // TODO configManager\n  config = Object.assign({}, {\n    time: Date.now(),\n    display: config.display || 'chromium',\n    url: config.url.trim(),\n  });\n  map.get(id).config = config;\n  save();\n\n  return config;\n}\n\n// ip should not be written\nexport function addNew(id: string, owner: string, macAddresses: Array<string>, name: string) {\n  const newRaspberryItem: RaspberryDataType = {\n    id,\n    name,\n    macAddresses,\n    config: {},\n    owner,\n  };\n\n  if (map.has(newRaspberryItem.id)) {\n    throw new Error(`Already has id: ${newRaspberryItem.id}`);\n  }\n\n  items.push(newRaspberryItem);\n  map.set(newRaspberryItem.id, newRaspberryItem);\n  save();\n\n  return newRaspberryItem;\n}\n\nexport function replaceMacAddresses(id: string, newMacAddresses: Array<string>) {\n  if (!map.has(id)) {\n    throw new Error(`Invalid id: \"${id}\"`);\n  }\n\n  map.get(id).macAddresses = newMacAddresses;\n  save();\n}\n\nexport function addMacAddress(id: string, newMacAddress: string) {\n  if (!map.has(id)) {\n    throw new Error(`Invalid id: \"${id}\"`);\n  }\n\n  map.get(id).macAddresses.push(newMacAddress);\n  save();\n}\n\nexport function saveScreenshot(id: string, screenshot: Buffer) {\n  writeFileSync(screenshotPath(id), screenshot);\n}\n\nexport function screenshotPath(id: string): string {\n  return `${dataPath}/screenshot-${id}.png`;\n}\n"]}