{"version":3,"sources":["../../../../src/modules/raspberries/websocket/raspberries.server.js"],"names":["init","broadcastAction","raspberriesManager","logger","clientsCount","clientNs","io","app","of","socket","onConnection","raspberry","action","room","data","userId","organisation","owner","info","to","user","websocket","users","get","client","id","raspberriesClientsConnected","emailDomains","on","raspberriesClientsDisonnected","join","forEach","domain","getAll","leave","config","callback","console","log","getByIdForUser","warn","newConfig","changeConfig","broadcast","ids","map","bind","filter","Boolean","sendAction","newRaspberry","add"],"mappings":"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","file":"raspberries.server.js","sourcesContent":["import Logger from 'nightingale/src';\nimport { emitAction } from 'alp-react-redux/src';\nimport { subscribe } from 'alp-websocket/src';\nimport type { UserType } from 'alp-auth/types';\nimport * as raspberriesManager from '../raspberriesManager.server';\nimport { updateAll, update, updateConfig } from '../actions/raspberry';\nimport type { RaspberryType } from '../types';\n\nconst logger = new Logger('app:websocket:raspberries');\n\nlet clientsCount = 0;\nlet clientNs;\n\nexport default function init(io, app) {\n  clientNs = io.of('client', socket => onConnection(socket, app));\n}\n\nexport function broadcastAction(raspberry: RaspberryType, action: Object) {\n  const room = !raspberry.data ? `id#${raspberry.userId}` : (\n    raspberry.data.organisation || `id#${raspberry.data.owner}`\n  );\n\n  logger.info('broadcast', { room, ...action });\n  if (room) {\n    emitAction(clientNs.to(`raspberries_${room}`), action);\n  }\n}\n\nfunction onConnection(socket, app) {\n  const user: ?UserType = app.websocket.users.get(socket.client.id);\n\n  if (!user) return;\n\n  clientsCount += 1;\n  logger.info('connected', { clientsCount });\n  raspberriesManager.raspberriesClientsConnected(user.id, user.emailDomains);\n\n  socket.on('disconnect', () => {\n    clientsCount -= 1;\n    logger.info('disconnected', { clientsCount });\n    raspberriesManager.raspberriesClientsDisonnected(user.id, user.emailDomains);\n  });\n\n  subscribe(\n    socket,\n    'raspberries',\n    () => {\n      socket.join(`raspberries_id#${user.id}`);\n      user.emailDomains.forEach(domain => socket.join(`raspberries_${domain}`));\n      emitAction(socket, updateAll(raspberriesManager.getAll(user)));\n    },\n    () => {\n      socket.leave(`raspberries_id#${user.id}`);\n      user.emailDomains.forEach(domain => socket.leave(`raspberries_${domain}`));\n    },\n  );\n\n  socket.on('raspberry:changeConfig', (id: string, config, callback: Function) => {\n    console.log('user', user);\n    const raspberry = raspberriesManager.getByIdForUser(user, id);\n    if (!raspberry) {\n      logger.warn('changeConfig: invalid raspberry', { id });\n      callback('invalid raspberry');\n      return;\n    }\n    const newConfig = raspberriesManager.changeConfig(raspberry, config);\n    if (!newConfig) {\n      callback('invalid raspberry');\n    } else {\n      callback(null, newConfig);\n      emitAction(socket.broadcast.to('raspberries'), updateConfig(raspberry, newConfig));\n    }\n  });\n\n  socket.on('raspberry:sendAction', (ids: Array<string>, action: string, callback: Function) => {\n    logger.info('sendAction raspberry', { ids, action });\n    ids\n      .map(raspberriesManager.getByIdForUser.bind(null, user))\n      .filter(Boolean)\n      .forEach((raspberry: RaspberryType) => {\n        if (raspberriesManager.sendAction(raspberry, action)) {\n          emitAction(socket.broadcast.to('raspberries'), update(raspberry));\n        }\n      });\n    callback();\n  });\n\n  socket.on('raspberry:registerUnknown', (id: string, info, callback: Function) => {\n    logger.info('register raspberry', { id, info });\n    const newRaspberry = raspberriesManager.add(id, user.id, info);\n    if (!newRaspberry) {\n      callback(null, false);\n    } else {\n      callback(null, newRaspberry);\n      broadcastAction(newRaspberry, update(newRaspberry));\n    }\n  });\n}\n"]}