{"version":3,"sources":["../../../../src/modules/raspberries/websocket/raspberryClient.server.js"],"names":["emit","broadcastToRoom","registerRaspberry","init","raspberriesManager","logger","MIN_SUPPORTED_VERSION","clients","Map","ns","mac","eventName","data","debug","has","warn","get","room","to","raspberry","client","online","joinRooms","io","Error","of","socket","onConnection","raspberryData","organisation","join","owner","info","clientMac","on","delete","setOffline","userId","version","configTime","ip","screenState","hostname","set","externalIp","handshake","address","replace","setOnline","callback","buffer","hasBuffer","changeScreenshot","patch","forEach","key","update"],"mappings":"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","file":"raspberryClient.server.js","sourcesContent":["import Logger from 'nightingale';\nimport { lt as semverLt } from 'semver';\nimport * as raspberriesManager from '../raspberriesManager.server';\nimport type { RaspberryType, RaspberryDataType } from '../types';\n\nconst logger = new Logger('app:websocket:raspberryClient');\nconst MIN_SUPPORTED_VERSION = '4.1.0';\nconst clients = new Map();\nlet ns;\n\nexport function emit(mac: string | boolean, eventName: string, ...data?: Array<any>) {\n  logger.debug('emit', { mac, eventName, data });\n  if (!mac) return;\n  if (!clients.has(mac)) {\n    logger.warn('cannot send message');\n    return;\n  }\n  clients.get(mac).emit(eventName, ...data);\n}\n\nexport function broadcastToRoom(room: string, eventName: string, ...data?: Array<any>) {\n  logger.debug('broadcast room', { room, eventName, data });\n  ns.to(room).emit(eventName, ...data);\n}\n\nexport function registerRaspberry(raspberry: RaspberryType) {\n  const client = clients.get(raspberry.online);\n  if (client) {\n    joinRooms(client, raspberry.data);\n  }\n}\n\nexport default function init(io) {\n  if (ns) throw new Error('Already initialized');\n  ns = io.of('raspberry-client', socket => onConnection(socket));\n}\n\nfunction joinRooms(socket, raspberryData: RaspberryDataType) {\n  if (raspberryData.organisation) {\n    socket.join(raspberryData.organisation);\n  } else if (raspberryData.owner) {\n    socket.join(raspberryData.owner);\n  }\n}\n\nfunction onConnection(socket) {\n  logger.info('client connected');\n  let clientMac;\n\n  socket.on('disconnect', () => {\n    logger.info('client disconnected');\n    if (clientMac && clients.get(clientMac) === socket) {\n      clients.delete(clientMac);\n\n      raspberriesManager.setOffline(clientMac);\n    }\n    clientMac = null;\n  });\n\n  socket.on('hello', ({ mac, userId, version, configTime, ip, screenState, hostname }) => {\n    logger.info('received hello', { mac, userId, version, configTime, ip, screenState, hostname });\n\n    if (clientMac) {\n      logger.warn('already have clientMac');\n      return;\n    }\n\n    if (!version || semverLt(version, MIN_SUPPORTED_VERSION)) {\n      socket.emit('selfUpdate');\n      return;\n    }\n\n    clientMac = mac;\n    clients.set(mac, socket);\n\n    const externalIp = socket.handshake.address.replace(/^::ffff:/, '');\n\n    raspberriesManager.setOnline(\n      mac,\n      userId,\n      configTime,\n      { hostname, externalIp, ip, screenState },\n      raspberryData => joinRooms(socket, raspberryData),\n    );\n  });\n\n  socket.on('screenshot', ({ buffer }, callback) => {\n    logger.info('got screenshot', { hasBuffer: !!buffer });\n    if (buffer) {\n      // non async method\n      raspberriesManager.changeScreenshot(clientMac, buffer);\n    }\n    callback();\n  });\n\n  socket.on('update', (data: Object) => {\n    logger.info('received update', data);\n\n    const patch = {};\n    ['screenState', 'updating'].forEach((key: string) => {\n      if (key in data) {\n        patch[key] = data[key];\n      }\n    });\n\n    raspberriesManager.update(clientMac, patch);\n  });\n}\n"]}