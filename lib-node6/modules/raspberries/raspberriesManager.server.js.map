{"version":3,"sources":["../../../src/modules/raspberries/raspberriesManager.server.js"],"names":["getById","getByMac","getAll","screenshotPath","setOnline","update","setOffline","changeScreenshot","raspberriesClientsConnected","raspberriesClientsDisonnected","changeConfig","add","sendAction","data","logger","map","Map","mapByMac","items","forEach","item","raspberry","id","registered","online","ip","set","macAddresses","mac","has","Error","get","Array","from","values","configTime","info","unknownMac","warn","updating","Object","assign","config","time","screenState","nextExpectedScreenState","delete","screenshot","saveScreenshot","Date","now","TIME_OUTDATED","intervalUpdateData","lastUpdated","debug","setInterval","clearInterval","log","newConfig","name","addOrReplace","existing","replaceMacAddresses","addMacAddress","addNew","action","Promise","resolve"],"mappings":"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","file":"raspberriesManager.server.js","sourcesContent":["import Logger from 'nightingale';\nimport * as data from './raspberriesData.server';\nimport { updateFromAction } from './raspberryActionManager';\nimport { emit as emitToRaspberryClient, broadcast as broadcastToRaspberryClients } from './websocket/raspberryClient.server';\nimport { broadcastAction as raspberriesBroadcastAction } from './websocket/raspberries.server';\nimport type { RaspberryConfig, RaspberryData, Raspberry } from './types';\nimport {\n    add as addAction,\n    update as updateAction,\n    remove as removeAction,\n    screenshotUpdated as screenshotUpdatedAction,\n} from './actions/raspberry';\n\nconst logger = new Logger('app.raspberriesManager');\nconst map = new Map();\nconst mapByMac = new Map();\n\ndata.items.forEach((item: ?RaspberryData) => {\n    const raspberry = {\n        id: item.id,\n        data: item,\n        registered: true,\n        online: false,\n        ip: null,\n    };\n\n    map.set(item.id, raspberry);\n    item.macAddresses.forEach(mac => {\n        if (mapByMac.has(mac)) {\n            throw new Error(`Mac defined more than one: ${mac}`);\n        }\n\n        mapByMac.set(mac, raspberry);\n    });\n});\n\nexport function getById(id: string): ?Raspberry {\n    return map.get(id);\n}\n\nexport function getByMac(mac: string): ?Raspberry {\n    return mapByMac.get(mac);\n}\n\nexport function getAll(): Array<Raspberry> {\n    return Array.from(map.values());\n}\n\nexport function screenshotPath(id: string): string {\n    return data.screenshotPath(id);\n}\n\n/* FROM raspberry clients */\n\nexport function setOnline(mac, configTime, info) {\n    let raspberry = getByMac(mac);\n    let unknownMac = false;\n    if (!raspberry) {\n        unknownMac = true;\n        logger.warn('unknown mac, adding', { mac });\n        raspberry = { id: mac };\n        map.set(raspberry.id, raspberry);\n        mapByMac.set(mac, raspberry);\n    } else {\n        logger.info('raspberry online', { mac });\n        if (raspberry.updating) {\n            raspberry.updating = false;\n        }\n    }\n\n    raspberry.online = mac;\n    Object.assign(raspberry, info);\n\n    raspberriesBroadcastAction(unknownMac ? addAction(raspberry) : updateAction(raspberry));\n\n    if (raspberry.data && raspberry.data.config.time !== configTime) {\n        emitToRaspberryClient(raspberry.online, 'changeConfig', raspberry.data.config);\n    }\n}\n\nexport function update(mac: string, info) {\n    let raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (info.screenState && raspberry.nextExpectedScreenState === info.screenState) {\n        raspberry.nextExpectedScreenState = null;\n    }\n\n    Object.assign(raspberry, info);\n    raspberriesBroadcastAction(updateAction(raspberry));\n}\n\nexport function setOffline(mac: string) {\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (!raspberry.data) {\n        map.delete(mac);\n        mapByMac.delete(mac);\n        raspberriesBroadcastAction(removeAction(raspberry));\n    } else {\n        Object.assign(raspberry, {\n            online: false,\n            // keep last known ip\n        });\n\n        raspberriesBroadcastAction(updateAction(raspberry));\n    }\n}\n\nexport function changeScreenshot(mac: string, screenshot: Buffer) {\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        logger.warn('changeScreenshot, no raspberry', { mac });\n        // should not happen...\n        return;\n    }\n\n    data.saveScreenshot(raspberry.id, screenshot);\n    raspberriesBroadcastAction(screenshotUpdatedAction(raspberry.id, Date.now()));\n}\n\n/* FROM browser clients */\n\nconst TIME_OUTDATED = 30000;\nlet intervalUpdateData;\nlet lastUpdated = Date.now() - TIME_OUTDATED;\n\nexport function raspberriesClientsConnected() {\n    const now = Date.now();\n    if (lastUpdated > now - TIME_OUTDATED) {\n        logger.debug('not outdated');\n        return;\n    }\n    lastUpdated = now;\n\n    logger.info('update data');\n    broadcastToRaspberryClients('screenshot');\n\n    intervalUpdateData = setInterval(() => {\n        logger.info('update data');\n        broadcastToRaspberryClients('screenshot');\n    }, TIME_OUTDATED);\n}\n\nexport function raspberriesClientsDisonnected() {\n    if (intervalUpdateData) {\n        clearInterval(intervalUpdateData);\n    }\n}\n\nexport function changeConfig(id: string, config: RaspberryConfig) {\n    logger.log('changeConfig', { id, config });\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return;\n    }\n\n    const newConfig = data.changeConfig(id, config);\n    emitToRaspberryClient(raspberry.online, 'changeConfig', newConfig);\n    return newConfig;\n}\n\nexport function add(mac: string, { name, addOrReplace, id }) {\n    logger.log('add', { mac, name, addOrReplace, id });\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        return logger.warn('unknown raspberry', { mac });\n    } else if (raspberry.registered) {\n        return logger.warn('raspberry already registered', { mac });\n    }\n\n    if (addOrReplace) {\n        mapByMac.delete(mac);\n        map.delete(mac);\n        const existing = map.get(id);\n        if (!existing) {\n            return logger.warn('existing not found', { id });\n        }\n\n        if (addOrReplace === 'replace') {\n            existing.data.macAddresses.forEach(mac => mapByMac.delete(mac));\n            data.replaceMacAddresses(id, [mac]);\n        } else {\n            data.addMacAddress(id, mac);\n        }\n        mapByMac.set(mac, existing);\n        existing.online = raspberry.online;\n        existing.ip = raspberry.ip;\n        existing.screenState = raspberry.screenState;\n\n        return existing;\n    } else {\n        raspberry.registered = true;\n        raspberry.data = data.addNew(raspberry.id, mac, name);\n    }\n\n    return raspberry;\n}\n\nexport function sendAction(id: string, action: string) {\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return Promise.resolve();\n    }\n\n    Object.assign(raspberry, updateFromAction(action));\n    emitToRaspberryClient(raspberry.online, 'action', action);\n    return raspberry;\n}\n"]}