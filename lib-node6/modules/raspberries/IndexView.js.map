{"version":3,"sources":["../../../src/modules/raspberries/IndexView.jsx"],"names":["raspberriesActions","IndexView","constructor","props","changeConfig","dispatch","sendAction","registerUnknown","render","unknownRaspberries","registeredRaspberries","title","context","t","setTitle","filter","r","online","propTypes","array","isRequired","func","contextTypes","object","raspberries","registered"],"mappings":";;;;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,kB;;AACZ;;;;;;;;AAEA,MAAMC,SAAN,0BAAkC;;AAa9BC,gBAAYC,KAAZ,EAAmB;AACf,cAAMA,KAAN;AACA,aAAKC,YAAL,GAAoB;AAAA,mBAAaD,MAAME,QAAN,CAAeL,mBAAmBI,YAAnB,CAAgC,YAAhC,CAAf,CAAb;AAAA,SAApB;AACA,aAAKE,UAAL,GAAkB;AAAA,mBAAaH,MAAME,QAAN,CAAeL,mBAAmBM,UAAnB,CAA8B,YAA9B,CAAf,CAAb;AAAA,SAAlB;AACA,aAAKC,eAAL,GAAuB;AAAA,mBAAaJ,MAAME,QAAN,CAAeL,mBAAmBO,eAAnB,CAAmC,YAAnC,CAAf,CAAb;AAAA,SAAvB;AACH;;AAEDC,aAAS;AAAA,qBAC2D,KAAKL,KADhE;AAAA,cACGE,QADH,UACGA,QADH;AAAA,cACaI,kBADb,UACaA,kBADb;AAAA,cACiCC,qBADjC,UACiCA,qBADjC;;AAEL,cAAMC,QAAQ,KAAKC,OAAL,CAAaA,OAAb,CAAqBC,CAArB,CAAuB,sBAAvB,CAAd;AACA,aAAKD,OAAL,CAAaE,QAAb,CAAsBH,KAAtB;AACA,eAAQ;AAAA;AAAA,cAAoB,MAAK,aAAzB,EAAuC,UAAUN,QAAjD;AACJ;AAAA;AAAA;AACI;AACI,iCAAaK,qBADjB;AAEI,gCAAY,KAAKJ;AAFrB,kBADJ;AAKI;AACI,iCAAaG,kBADjB;AAEI,wCAAoBC,sBAAsBK,MAAtB,CAA6BC,KAAK,CAACA,EAAEC,MAArC,CAFxB;AAGI,qCAAiB,KAAKV,eAH1B;AAII,gCAAY,KAAKD;AAJrB,kBALJ;AAWI;AACI,iCAAaI,qBADjB;AAEI,kCAAc,KAAKN,YAFvB;AAGI,gCAAY,KAAKE;AAHrB;AAXJ;AADI,SAAR;AAmBH;AA3C6B;;AAA5BL,S,CACKiB,S,GAAY;AACfR,2BAAuB,iBAAUS,KAAV,CAAgBC,UADxB;AAEfX,wBAAoB,iBAAUU,KAAV,CAAgBC,UAFrB;AAGff,cAAU,iBAAUgB,IAAV,CAAeD;AAHV,C;AADjBnB,S,CAOKqB,Y,GAAe;AAClBR,cAAU,iBAAUO,IAAV,CAAeD,UADP;AAElBR,aAAS,iBAAUW,MAAV,CAAiBH;AAFR,C;kBAuCX,4BAAQ;AAAA,QAAGI,WAAH,QAAGA,WAAH;AAAA,WAAsB;AACzCd,+BAAuBc,YAAYT,MAAZ,CAAmBC,KAAKA,EAAES,UAA1B,CADkB;AAEzChB,4BAAoBe,YAAYT,MAAZ,CAAmBC,KAAK,CAACA,EAAES,UAA3B;AAFqB,KAAtB;AAAA,CAAR,EAGXxB,SAHW,C","file":"IndexView.jsx","sourcesContent":["import { Component, PropTypes } from 'react';\nimport { connect } from 'alp-react-redux';\nimport Header from './components/HeaderComponent';\nimport RaspberryList from './components/RaspberryListComponent';\nimport UnknownRaspberryList from './components/UnknownRaspberryListComponent';\nimport * as raspberriesActions from './actions/raspberry';\nimport SubscribeContainer from 'react-alp-subscribe-container';\n\nclass IndexView extends Component {\n    static propTypes = {\n        registeredRaspberries: PropTypes.array.isRequired,\n        unknownRaspberries: PropTypes.array.isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        setTitle: PropTypes.func.isRequired,\n        context: PropTypes.object.isRequired,\n    };\n\n\n    constructor(props) {\n        super(props);\n        this.changeConfig = (...args) => props.dispatch(raspberriesActions.changeConfig(...args));\n        this.sendAction = (...args) => props.dispatch(raspberriesActions.sendAction(...args));\n        this.registerUnknown = (...args) => props.dispatch(raspberriesActions.registerUnknown(...args));\n    }\n\n    render() {\n        const { dispatch, unknownRaspberries, registeredRaspberries } = this.props;\n        const title = this.context.context.t('raspberry-pool.title');\n        this.context.setTitle(title);\n        return (<SubscribeContainer name=\"raspberries\" dispatch={dispatch}>\n            <div>\n                <Header\n                    raspberries={registeredRaspberries}\n                    sendAction={this.sendAction}\n                />\n                <UnknownRaspberryList\n                    raspberries={unknownRaspberries}\n                    offlineRaspberries={registeredRaspberries.filter(r => !r.online)}\n                    registerUnknown={this.registerUnknown}\n                    sendAction={this.sendAction}\n                />\n                <RaspberryList\n                    raspberries={registeredRaspberries}\n                    changeConfig={this.changeConfig}\n                    sendAction={this.sendAction}\n                />\n            </div>\n        </SubscribeContainer>);\n    }\n}\n\nexport default connect(({ raspberries }) => ({\n    registeredRaspberries: raspberries.filter(r => r.registered),\n    unknownRaspberries: raspberries.filter(r => !r.registered),\n}))(IndexView);\n"]}