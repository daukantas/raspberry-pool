{"version":3,"sources":["../../../../src/modules/raspberries/actions/raspberry.js"],"names":["sendAction","registerUnknown","updateAll","raspberries","add","raspberry","update","id","updateConfig","config","remove","screenshotUpdated","screenshotDate","saving","saved","changes","sendingAction","action","actionSent","result","changeConfig","newConfig","dispatch","websocket","configSaved","emit","data","forEach","map","r","name","addOrReplace","newRaspberry"],"mappings":";;;;;;;;;QA4CgBA,U,GAAAA,U;QAQAC,e,GAAAA,e;;AApDhB;;;;AAYO,MAAMC,gCAAY,iCAAa,wBAAb,EAAuCC,gBAAgB,EAAEA,WAAF,EAAhB,CAAvC,CAAlB;AACA,MAAMC,oBAAM,iCAAa,eAAb,EAA8BC,cAAc,EAAEA,SAAF,EAAd,CAA9B,CAAZ;AACA,MAAMC,0BAAS,iCAAa,kBAAb,EAAiCD,cAAc,EAAEE,IAAIF,UAAUE,EAAhB,EAAoBF,SAApB,EAAd,CAAjC,CAAf;AACA,MAAMG,sCAAe,iCACxB,yBADwB,EAExB,CAACH,SAAD,EAAYI,MAAZ,MAAgC,EAAEF,IAAIF,UAAUE,EAAhB,EAAoBE,MAApB,EAAhC,CAFwB,CAArB;AAIA,MAAMC,0BAAS,iCAAa,kBAAb,EAAiCL,cAAc,EAAEE,IAAIF,UAAUE,EAAhB,EAAd,CAAjC,CAAf;AACA,MAAMI,gDAAoB,iCAC/B,oBAD+B,EAE/B,CAACJ,EAAD,EAAKK,cAAL,MAAyB,EAAEL,EAAF,EAAMK,cAAN,EAAzB,CAF+B,CAA1B;AAIA,MAAMC,0BAAS,iCAAa,kBAAb,EAAiCR,cAAc,EAAEE,IAAIF,UAAUE,EAAhB,EAAd,CAAjC,CAAf;AACA,MAAMO,wBAAQ,iCAAa,iBAAb,EAAgC,CAACT,SAAD,EAAYU,OAAZ,MAAyB,EAAER,IAAIF,UAAUE,EAAhB,EAAoBQ,OAApB,EAAzB,CAAhC,CAAd;AACA,MAAMC,wCAAgB,iCACzB,0BADyB,EAEzB,CAACX,SAAD,EAAYY,MAAZ,MAAwB,EAAEV,IAAIF,UAAUE,EAAhB,EAAoBU,MAApB,EAAxB,CAFyB,CAAtB;AAIA,MAAMC,kCAAa,iCACtB,uBADsB,EAEtB,CAACb,SAAD,EAAYY,MAAZ,EAAoBE,MAApB,MAAgC,EAAEZ,IAAIF,UAAUE,EAAhB,EAAoBU,MAApB,EAA4BE,MAA5B,EAAhC,CAFsB,CAAnB;;AAKA,MAAMC,sCAAe,CAACf,SAAD,EAA2BgB,SAA3B;AAAA,+BAC1B,WAAOC,QAAP,EAA2B,EAAEC,SAAF,EAA3B,EAA6C;AAC3CD,aAAST,OAAOR,SAAP,CAAT;AACA,UAAMmB,cAAsB,MAAMD,UAAUE,IAAV,CAAe,wBAAf,EAAyCpB,UAAUE,EAAnD,EAAuDc,SAAvD,CAAlC;AACAC,aAASd,aAAaH,SAAb,EAAwBmB,WAAxB,CAAT;AACAF,aAASR,MAAMT,SAAN,EAAiB,EAAEqB,mBAAWrB,UAAUqB,IAArB,IAA2BjB,QAAQe,WAAnC,GAAF,EAAjB,CAAT;AACD,GANyB;;AAAA;AAAA;AAAA;AAAA,IAArB;;AASA,SAASxB,UAAT,CAAoBG,WAApB,EAAuDc,MAAvD,EAAuE;AAC5E;AAAA,kCAAO,WAAOK,QAAP,EAA2B,EAAEC,SAAF,EAA3B,EAA6C;AAClDpB,kBAAYwB,OAAZ,CAAoB;AAAA,eAAaL,SAASN,cAAcX,SAAd,EAAyBY,MAAzB,CAAT,CAAb;AAAA,OAApB;AACA,YAAME,SAAS,MAAMI,UAAUE,IAAV,CAAe,sBAAf,EAAuCtB,YAAYyB,GAAZ,CAAgB;AAAA,eAAKC,EAAEtB,EAAP;AAAA,OAAhB,CAAvC,EAAmEU,MAAnE,CAArB;AACAd,kBAAYwB,OAAZ,CAAoB;AAAA,eAAaL,SAASJ,WAAWb,SAAX,EAAsBY,MAAtB,EAA8BE,MAA9B,CAAT,CAAb;AAAA,OAApB;AACD,KAJD;;AAAA;AAAA;AAAA;AAAA;AAKD;;AAEM,SAASlB,eAAT,CACLI,SADK,EAEL,EAAEyB,IAAF,EAAQC,YAAR,EAAsBxB,EAAtB,EAFK,EAGL;AACA;AAAA,kCAAO,WAAOe,QAAP,EAA2B,EAAEC,SAAF,EAA3B,EAA6C;AAClDD,eAAST,OAAOR,SAAP,CAAT;AACA,YAAM2B,eAAe,MAAMT,UAAUE,IAAV,CAAe,2BAAf,EAA4CpB,UAAUE,EAAtD,EAA0D,EAAEuB,IAAF,EAAQC,YAAR,EAAsBxB,EAAtB,EAA1D,CAA3B;AACA,UAAIyB,YAAJ,EAAkB;AAChB,YAAIA,aAAazB,EAAb,KAAoBF,UAAUE,EAAlC,EAAsC;AACpCe,mBAASZ,OAAOL,SAAP,CAAT;AACAiB,mBAAShB,OAAO0B,YAAP,CAAT;AACD,SAHD,MAGO;AACLV,mBAASR,MAAMkB,YAAN,EAAoBA,YAApB,CAAT;AACD;AACF;AACF,KAXD;;AAAA;AAAA;AAAA;AAAA;AAYD","file":"raspberry.js","sourcesContent":["import { createAction } from 'alp-react-redux/src';\nimport type { RaspberryType, RaspberryConfigType } from '../types';\n\ntype RegisterDataType = { name: string, addOrReplace: boolean, id: string };\n\nexport type SendActionFunctionType =\n  (raspberries: Array<RaspberryType>, action: string) => () => Promise;\nexport type ChangeConfigFunctionType =\n  (raspberry: RaspberryType, newConfig: RaspberryConfigType) => () => Promise;\nexport type RegisterUnknownFunctionType =\n  (raspberry: RaspberryType, config: RegisterDataType) => () => Promise;\n\nexport const updateAll = createAction('UPDATE_ALL_RASPBERRIES', raspberries => ({ raspberries }));\nexport const add = createAction('ADD_RASPBERRY', raspberry => ({ raspberry }));\nexport const update = createAction('UPDATE_RASPBERRY', raspberry => ({ id: raspberry.id, raspberry }));\nexport const updateConfig = createAction(\n    'UPDATE_RASPBERRY_CONFIG',\n    (raspberry, config: Object) => ({ id: raspberry.id, config }),\n);\nexport const remove = createAction('REMOVE_RASPBERRY', raspberry => ({ id: raspberry.id }));\nexport const screenshotUpdated = createAction(\n  'SCREENSHOT_UPDATED',\n  (id, screenshotDate) => ({ id, screenshotDate }),\n);\nexport const saving = createAction('SAVING_RASPBERRY', raspberry => ({ id: raspberry.id }));\nexport const saved = createAction('SAVED_RASPBERRY', (raspberry, changes) => ({ id: raspberry.id, changes }));\nexport const sendingAction = createAction(\n    'SENDING_ACTION_RASPBERRY',\n    (raspberry, action) => ({ id: raspberry.id, action }),\n);\nexport const actionSent = createAction(\n    'ACTION_SENT_RASPBERRY',\n    (raspberry, action, result) => ({ id: raspberry.id, action, result }),\n);\n\nexport const changeConfig = (raspberry: RaspberryType, newConfig: RaspberryConfigType) => (\n  async (dispatch: Function, { websocket }) => {\n    dispatch(saving(raspberry));\n    const configSaved: Object = await websocket.emit('raspberry:changeConfig', raspberry.id, newConfig);\n    dispatch(updateConfig(raspberry, configSaved));\n    dispatch(saved(raspberry, { data: { ...raspberry.data, config: configSaved } }));\n  }\n);\n\nexport function sendAction(raspberries: Array<RaspberryType>, action: string) {\n  return async (dispatch: Function, { websocket }) => {\n    raspberries.forEach(raspberry => dispatch(sendingAction(raspberry, action)));\n    const result = await websocket.emit('raspberry:sendAction', raspberries.map(r => r.id), action);\n    raspberries.forEach(raspberry => dispatch(actionSent(raspberry, action, result)));\n  };\n}\n\nexport function registerUnknown(\n  raspberry: RaspberryType,\n  { name, addOrReplace, id }: RegisterDataType\n) {\n  return async (dispatch: Function, { websocket }) => {\n    dispatch(saving(raspberry));\n    const newRaspberry = await websocket.emit('raspberry:registerUnknown', raspberry.id, { name, addOrReplace, id });\n    if (newRaspberry) {\n      if (newRaspberry.id !== raspberry.id) {\n        dispatch(remove(raspberry));\n        dispatch(update(newRaspberry));\n      } else {\n        dispatch(saved(newRaspberry, newRaspberry));\n      }\n    }\n  };\n}\n"]}