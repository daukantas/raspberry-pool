{"version":3,"sources":["../../../../src/modules/raspberries/components/Raspberry.jsx"],"names":["changeConfig","Raspberry","constructor","props","state","render","raspberry","url","display","saving","lastUrl","data","config","lastDisplay","id","Date","now","online","screenState","name","externalIp","ip","actions","width","flexBasis","flexGrow","e","setState","target","value"],"mappings":"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","file":"Raspberry.jsx","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'alp-react-redux/src';\nimport T from 'react-alp-translate/src';\nimport Spinner from '../../common/components/SpinnerComponent';\nimport Actions from './raspberry/Actions';\nimport { changeConfig } from '../actions/raspberry';\nimport s from './Raspberry.styl';\nimport type { RaspberryType } from '../types';\nimport type { ChangeConfigFunctionType } from '../actions/raspberry';\n\ntype PropsType = {\n  raspberry: RaspberryType,\n  changeConfig: ChangeConfigFunctionType,\n};\n\nexport default connect(\n  null, // { raspberries:  },\n  { changeConfig, }\n)(class Raspberry extends Component {\n  constructor(props: PropsType) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { raspberry, changeConfig } = this.props;\n\n    let url;\n    let display;\n    if (this.state.url != null) {\n      url = this.state.url;\n    } else if (raspberry.saving) {\n      url = this.state.lastUrl;\n    } else {\n      url = raspberry.data.config.url;\n    }\n\n    if (this.state.display != null) {\n      display = this.state.display;\n    } else if (raspberry.saving) {\n      display = this.state.lastDisplay;\n    } else {\n      display = raspberry.data.config.display;\n    }\n\n    if (!display) {\n      display = url ? 'chromium' : 'none';\n    }\n\n    return (\n      <div className=\"raspberry\">\n        <div className=\"img-container\">\n          <img alt=\"screenshot\" src={`/screenshot.jpg?id=${raspberry.id}&date=${Date.now()}`} />\n        </div>\n        <div className=\"header-container\">\n          <h2 className=\"text-title\">\n            <span\n              className={`screen-status ${raspberry.online ? raspberry.screenState : 'offline'}`}\n              title={raspberry.screenState === 'on' ? 'On' : 'Off'}\n            >\n              <span className=\"icon\" />\n              <span className=\"status\" />\n            </span>\n\n            {raspberry.data.name}\n          </h2>\n        </div>\n        <Spinner active={raspberry.saving} />\n\n        <div className=\"status-container\">\n          <span className={`raspberry-status label ${raspberry.online ? 'success' : 'warning'}`}>\n            {!raspberry.online ? <T id=\"raspberry.offline\" /> : (\n              `${raspberry.externalIp} | ${raspberry.ip}`\n            )}\n          </span>\n        </div>\n\n        <div className={s.actions}>\n          <Actions raspberries={[raspberry]} />\n        </div>\n\n        <fieldset>\n          <legend><T id=\"raspberry.config\" /></legend>\n          <div className=\"row row-responsive spaced\">\n            <div className=\"col\" style={{ width: '100px', flexBasis: '100px', flexGrow: 0 }}>\n              <div className=\"input select\">\n                <select\n                  value={display}\n                  id={`raspberry-select-${raspberry.id}`}\n                  className={'has-value'}\n                  onChange={(e) => this.setState({\n                    display: raspberry.data.config.display === e.target.value ? null : e.target.value,\n                  })}\n                >\n                  <option value=\"none\">Empty</option>\n                  <option value=\"chromium\">chromium</option>\n                  <option value=\"livestreamer\">livestreamer</option>\n                  <option value=\"omxplayer\">omxplayer</option>\n                </select>\n                <label htmlFor={`raspberry-select-${raspberry.id}`}><T id=\"raspberry.display\" /></label>\n              </div>\n            </div>\n            {(display && display !== 'none') && (\n              <div className=\"col\">\n                <div className=\"input text\">\n                  <input\n                    id={`raspberry-url-${raspberry.id}`}\n                    type={display === 'omxplayer' ? 'text' : 'url'} required\n                    className={`has-value${url ? '' : ' has-empty-value'}`}\n                    value={url}\n                    autoComplete=\"off\"\n                    onChange={(e) => this.setState({\n                      url: raspberry.data.config.url === e.target.value ? null : e.target.value,\n                    })}\n                  />\n                  <label htmlFor={`raspberry-url-${raspberry.id}`}>\n                    <T id={display === 'omxplayer' ? 'raspberry.urlOrPath' : 'raspberry.url'} />\n                  </label>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"button-container align-center\">\n            <button\n              type=\"button\"\n              disabled={raspberry.saving || (this.state.url == null && this.state.display == null)}\n              onClick={() => {\n                const display = this.state.display || raspberry.data.config.display;\n                const url = this.state.url || raspberry.data.config.url;\n                this.setState({ url: null, lastUrl: url, display: null, lastDisplay: display });\n                changeConfig(raspberry, { display, url });\n              }}\n            >\n              <T id=\"raspberry.save\" />\n            </button>\n          </div>\n        </fieldset>\n      </div>\n    );\n  }\n});\n"]}