{"version":3,"sources":["../../../../../src/modules/raspberries/components/raspberry/Actions.jsx"],"names":["sendAction","raspberries","flat","className","length","actions","availableActions","map","action","filter","r","online","isVisible","value","raspberry","isInProgress","name"],"mappings":";;;;;;kQAAA;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;kBAWe,4BACb,IADa,EAEb,EAAEA,iCAAF,EAFa,EAGb,CAAC,EAAEC,WAAF,EAAeD,UAAf,EAA2BE,IAA3B,EAAiCC,SAAjC,EAAD,KAA6D;AAC7D,MAAI,CAACF,WAAD,IAAgB,CAACA,YAAYG,MAAjC,EAAyC;AACvC,WAAO,uCAAK,WAAW,kBAAEC,OAAlB,GAAP;AACD;;AAED,QAAMC,mBAAmB,2BACtBC,GADsB,CAClBC,uBACAA,MADA;AAEHP,iBAAaA,YAAYQ,MAAZ,CAAmBC,KAAKA,EAAEC,MAAF,IAAYH,OAAOI,SAAP,CAAiBF,CAAjB,CAApC;AAFV,IADkB,EAKtBD,MALsB,CAKfD,UAAUA,OAAOP,WAAP,CAAmBG,MAAnB,GAA4B,CALvB,CAAzB;;AAOA,MAAI,CAACE,iBAAiBF,MAAtB,EAA8B;AAC5B,WAAO,uCAAK,WAAW,kBAAEC,OAAlB,GAAP;AACD;;AAED,SACE;AAAA;AAAA,MAAK,WAAY,GAAE,kBAAEA,OAAQ,mBAAkB,CAACH,IAAD,GAAQ,EAAR,GAAa,OAAQ,EAApE;AAAA;AAEE;AAAA;AAAA,QAAI,WAAU,MAAd;AACGI,uBAAiBC,GAAjB,CAAqBC,UACpB;AAAA;AAAA;AACE,eAAKA,OAAOK,KADd;AAEE,mBAAS,MAAM;AACb,kBAAMZ,cAAcO,OAAOP,WAAP,CAAmBQ,MAAnB,CAA0BK,aAC5C,CAACN,OAAOO,YAAP,CAAoBD,SAApB,CADiB,CAApB;AAGA,gBAAIb,YAAYG,MAAhB,EAAwB;AACtB,qBAAOJ,WAAWC,WAAX,EAAwBO,OAAOK,KAA/B,CAAP;AACD;AACF;AATH;AAWGL,eAAOQ,IAXV;AAYE;AACE,kBAAQ,CAAC,CAACf,YAAYQ,MAAZ,CAAmBK,aAC1BA,UAAUT,OAAV,IAAqBS,UAAUT,OAAV,CAAkBG,OAAOK,KAAzB,MAAoC,SAA1D,IACIL,OAAOO,YAAP,CAAoBD,SAApB,CAFI,EAGPV;AAJL;AAZF,OADD;AADH;AAFF,GADF;AA4BD,CA/Cc,C","file":"Actions.jsx","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { connect } from 'alp-react-redux/src';\nimport actions from '../../raspberryActions';\nimport Spinner from '../../../common/components/SpinnerComponent';\nimport { sendAction } from '../../actions/raspberry';\nimport s from './Actions.styl';\nimport type { SendActionFunctionType } from '../../actions/raspberry';\nimport type { RaspberryType } from '../../types';\n\ntype PropsType = {\n  raspberries: Array<RaspberryType>,\n  sendAction: SendActionFunctionType,\n  flat: ?boolean,\n  className: ?string,\n};\n\nexport default connect(\n  null,\n  { sendAction },\n)(({ raspberries, sendAction, flat, className }: PropsType) => {\n  if (!raspberries || !raspberries.length) {\n    return <div className={s.actions} />;\n  }\n\n  const availableActions = actions\n    .map(action => ({\n      ...action,\n      raspberries: raspberries.filter(r => r.online && action.isVisible(r)),\n    }))\n    .filter(action => action.raspberries.length > 0);\n\n  if (!availableActions.length) {\n    return <div className={s.actions} />;\n  }\n\n  return (\n    <div className={`${s.actions} dropdown button${!flat ? '' : ' flat'}`}>\n      Actions\n      <ul className=\"list\">\n        {availableActions.map(action => (\n          <li\n            key={action.value}\n            onClick={() => {\n              const raspberries = action.raspberries.filter(raspberry => (\n                !action.isInProgress(raspberry)\n              ));\n              if (raspberries.length) {\n                return sendAction(raspberries, action.value);\n              }\n            }}\n          >\n            {action.name}\n            <Spinner\n              active={!!raspberries.filter(raspberry => (\n                (raspberry.actions && raspberry.actions[action.value] === 'sending')\n                 || action.isInProgress(raspberry)\n              )).length}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n"]}