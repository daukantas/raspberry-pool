{"version":3,"sources":["../../../../src/modules/raspberries/components/UnknownRaspberryComponent.jsx"],"names":["raspberries","offlineRaspberries","filter","r","registered","online","registerUnknown","UnknownRaspberryComponent","constructor","props","state","render","raspberry","saving","hostname","ip","externalIp","name","undefined","e","setState","target","value","id","addOrReplace","length","user","data","owner","map"],"mappings":"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","file":"UnknownRaspberryComponent.jsx","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'alp-react-redux/src';\nimport T from 'react-alp-translate/src';\nimport User from 'react-alp-user/src';\nimport type { ReactNodeType } from 'alp-react-redux/src/types';\nimport Spinner from '../../common/components/SpinnerComponent';\nimport { registerUnknown } from '../actions/raspberry';\nimport type { RaspberryType } from '../types';\nimport type { RegisterUnknownFunctionType } from '../actions/raspberry';\n\ntype PropsType = {\n  raspberry: RaspberryType,\n  offlineRaspberries: Array<RaspberryType>,\n  registerUnknown: RegisterUnknownFunctionType,\n};\n\nexport default connect(\n  ({ raspberries }) => ({\n    offlineRaspberries: raspberries.filter(r => r.registered && !r.online),\n  }),\n  { registerUnknown },\n)(class UnknownRaspberryComponent extends Component {\n  state = {};\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(props: PropsType) {\n    super(props);\n  }\n\n  render(): ReactNodeType {\n    const { raspberry, offlineRaspberries, registerUnknown } = this.props;\n\n    return (\n      <div className=\"raspberry unknown\">\n        <Spinner active={raspberry.saving} />\n        <div>\n          <h2 className=\"text-title\">{raspberry.hostname || raspberry.ip}</h2>\n          <span className=\"status label\">{raspberry.externalIp}</span>\n          <span>&nbsp;</span>\n          <span className=\"status label\">{raspberry.ip}</span>\n        </div>\n\n        <div className=\"row row-responsive spaced\">\n          <div className=\"col wp-50\">\n            <div className=\"text-paragraph-title\"><T id=\"unknownRaspberry.title\" /></div>\n            <div className=\"input text\">\n              <input\n                type=\"text\"\n                required\n                autoComplete=\"off\"\n                className={`${this.state.name === undefined ? '' : `has-value${this.state.name ? '' : ' has-empty-value'}`}`}\n                value={this.state.name}\n                onChange={(e) => this.setState({ name: e.target.value })}\n              />\n              <label htmlFor={`raspberry-url-${raspberry.id}`}>Name</label>\n            </div>\n          </div>\n          <div className=\"col wp-50\">\n            <div className=\"input radio\">\n              <input\n                id={`add-raspberry-${raspberry.id}`}\n                name=\"addOrReplace\"\n                type=\"radio\"\n                value=\"\"\n                checked={!this.state.addOrReplace}\n                onChange={(e) => this.setState({ addOrReplace: e.target.value, id: null })}\n              />\n              <label htmlFor={`add-raspberry-${raspberry.id}`}>\n                <T id=\"unknownRaspberry.add\" />\n              </label>\n            </div>\n            {!offlineRaspberries.length ? '' : [\n              <div key=\"addToExisting\" className=\"input radio\">\n                <input\n                  id={`add-to-existing-raspberry-${raspberry.id}`}\n                  name=\"addOrReplace\"\n                  type=\"radio\"\n                  value=\"addToExisting\"\n                  checked={this.state.addOrReplace === 'addToExisting'}\n                  onChange={(e) => this.setState({ addOrReplace: e.target.value, id: null })}\n                />\n                <label htmlFor={`add-to-existing-raspberry-${raspberry.id}`}>\n                  <T id=\"unknownRaspberry.addToExisting\" />\n                </label>\n              </div>,\n              <div key=\"replace\" className=\"input radio\">\n                <input\n                  id={`replace-raspberry-${raspberry.id}`}\n                  name=\"addOrReplace\"\n                  type=\"radio\"\n                  value=\"replace\"\n                  checked={this.state.addOrReplace === 'replace'}\n                  onChange={(e) => this.setState({ addOrReplace: e.target.value })}\n                />\n                <label htmlFor={`replace-raspberry-${raspberry.id}`}>\n                  <T id=\"unknownRaspberry.replace\" />\n                </label>\n              </div>,\n            ]}\n            <User>{user => (\n              <select\n                disabled={!this.state.addOrReplace}\n                name=\"raspberry\"\n                onChange={(e) => this.setState({ addOrReplace: this.state.addOrReplace || 'replace', id: e.target.value })}\n              >\n                {!this.state.id && <option key=\"__empty\" />}\n                {offlineRaspberries.filter(r => r.data.owner === user.id).map(r => (\n                  <option key={r.id} value={r.id}>{r.data.name}</option>\n                ))}\n              </select>\n            )}</User>\n          </div>\n        </div>\n\n        <div className=\"button-container align-center\">\n          <button\n            type=\"button\"\n            disabled={!!raspberry.saving || (\n              (!this.state.addOrReplace && !this.state.name)\n              || (this.state.addOrReplace && !this.state.id)\n            )}\n            onClick={() => {\n              registerUnknown(raspberry, {\n                name: this.state.name,\n                addOrReplace: this.state.addOrReplace,\n                id: this.state.id,\n              });\n            }}\n          >\n            <T id=\"unknownRaspberry.add\" />\n          </button>\n        </div>\n      </div>\n    );\n        /*\n                <button type=\"button\" onClick={() => {\n                    sendAction(raspberry, 'blink');\n                    this.setState({ urlChanged: false });\n                }}>Blink</button>\n        */\n  }\n});\n"]}