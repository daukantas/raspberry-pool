{"version":3,"sources":["../../../../src/modules/raspberries/reducers/raspberries.js"],"names":["raspberryReducer","state","raspberry","config","data","saving","changes","action","actions","raspberryHandler","raspberries","id","Error","type","map","filter","r"],"mappings":";;;;;;;;AAAA;;AAEA;;AAYA;;AAEA,MAAMA,mBAAmB,kCAAc;AACrC,uBAAU,CAACC,KAAD;AAAA,QAAUC,SAAV,QAAUA,SAAV;AAAA,WAA0BA,SAA1B;AAAA,GAD2B;AAErC,6BAAgB,CAACA,SAAD;AAAA,QAAcC,MAAd,SAAcA,MAAd;AAAA,wBACXD,SADW;AAEdE,yBAAWF,UAAUE,IAArB,IAA2BD,MAA3B;AAFc;AAAA,GAFqB;AAMrC,uBAAU,CAACF,KAAD;AAAA,QAAUC,SAAV,SAAUA,SAAV;AAAA,WAA0BA,SAA1B;AAAA,GAN2B;AAOrC,kCAAqBA,0BAAmBA,SAAnB,CAPgB;AAQrC,uBAAUA,0BAAmBA,SAAnB,IAA8BG,QAAQ,IAAtC,GAR2B;AASrC,sBAAUH,SAAD,iBAAqBA,SAArB,IAAgCG,QAAQ,KAAxC,GAT4B;AAUrC,8BAAiB,CAACH,SAAD;AAAA,QAAcI,OAAd,SAAcA,OAAd;AAAA,QAAuBC,MAAvB,SAAuBA,MAAvB;AAAA,wBACZL,SADY,EAEZI,OAFY;AAGfE,4BACKN,UAAUM,OADf;AAEE,SAACD,MAAD,GAAU;AAFZ;AAHe;AAAA,GAVoB;AAkBrC,2BAAc,CAACL,SAAD;AAAA,QAAcI,OAAd,SAAcA,OAAd;AAAA,QAAuBC,MAAvB,SAAuBA,MAAvB;AAAA,wBACTL,SADS,EAETI,OAFS;AAGZE,4BACKN,UAAUM,OADf;AAEE,SAACD,MAAD,GAAU;AAFZ;AAHY,OAOT,8CAAiBA,MAAjB,CAPS;AAAA;AAlBuB,CAAd,CAAzB;;AA6BA,MAAME,mBAAmB,CAACC,WAAD,EAAcH,MAAd,KAAyB;AAChD,MAAI,CAACA,OAAOI,EAAZ,EAAgB,MAAM,IAAIC,KAAJ,CAAW,uBAAqBL,OAAOM,IAAK,GAA5C,CAAN;AAChB,SAAOH,YAAYI,GAAZ,CAAgBZ,aAAa;AAClC,QAAIA,UAAUS,EAAV,KAAiBJ,OAAOI,EAA5B,EAAgC,OAAOT,SAAP;AAChC,WAAOF,iBAAiBE,SAAjB,EAA4BK,MAA5B,CAAP;AACD,GAHM,CAAP;AAID,CAND;;kBAQe,kCAAc,QAAd,EAAwB;AACrC,0BAAa,CAACN,KAAD;AAAA,QAAUS,WAAV,SAAUA,WAAV;AAAA,WAA2CA,WAA3C;AAAA,GADwB;AAErC,oBAAO,CAACA,WAAD;AAAA,QAAgBR,SAAhB,SAAgBA,SAAhB;AAAA,WAAgC,CAAC,GAAGQ,WAAJ,EAAiBR,SAAjB,CAAhC;AAAA,GAF8B;AAGrC,uBAAU,CAACQ,WAAD;AAAA,QAAgBC,EAAhB,SAAgBA,EAAhB;AAAA,WAAyBD,YAAYK,MAAZ,CAAmBC,KAAKA,EAAEL,EAAF,KAASA,EAAjC,CAAzB;AAAA,GAH2B;AAIrC,uBAAUF,gBAJ2B;AAKrC,6BAAgBA,gBALqB;AAMrC,kCAAqBA,gBANgB;AAOrC,uBAAUA,gBAP2B;AAQrC,sBAASA,gBAR4B;AASrC,8BAAiBA,gBAToB;AAUrC,2BAAcA;AAVuB,CAAxB,C","file":"raspberries.js","sourcesContent":["import { createReducer } from 'alp-react-redux';\n\nimport {\n  updateAll,\n  add,\n  update,\n  updateConfig,\n  remove,\n  screenshotUpdated,\n  saving,\n  saved,\n  sendingAction,\n  actionSent,\n} from '../actions/raspberry';\nimport { updateFromAction } from '../raspberryActionManager';\n\nconst raspberryReducer = createReducer({\n  [update]: (state, { raspberry }) => raspberry,\n  [updateConfig]: (raspberry, { config }: { config: Object }) => ({\n    ...raspberry,\n    data: { ...raspberry.data, config },\n  }),\n  [remove]: (state, { raspberry }) => raspberry,\n  [screenshotUpdated]: raspberry => ({ ...raspberry }),\n  [saving]: raspberry => ({ ...raspberry, saving: true }),\n  [saved]: (raspberry) => ({ ...raspberry, saving: false }),\n  [sendingAction]: (raspberry, { changes, action }) => ({\n    ...raspberry,\n    ...changes,\n    actions: {\n      ...raspberry.actions,\n      [action]: 'sending',\n    },\n  }),\n  [actionSent]: (raspberry, { changes, action }) => ({\n    ...raspberry,\n    ...changes,\n    actions: {\n      ...raspberry.actions,\n      [action]: null,\n    },\n    ...updateFromAction(action),\n  }),\n});\n\nconst raspberryHandler = (raspberries, action) => {\n  if (!action.id) throw new Error(`Missing action.id, ${action.type}`);\n  return raspberries.map(raspberry => {\n    if (raspberry.id !== action.id) return raspberry;\n    return raspberryReducer(raspberry, action);\n  });\n};\n\nexport default createReducer(() => [], {\n  [updateAll]: (state, { raspberries }): Array<Object> => raspberries,\n  [add]: (raspberries, { raspberry }) => [...raspberries, raspberry],\n  [remove]: (raspberries, { id }) => raspberries.filter(r => r.id !== id),\n  [update]: raspberryHandler,\n  [updateConfig]: raspberryHandler,\n  [screenshotUpdated]: raspberryHandler,\n  [saving]: raspberryHandler,\n  [saved]: raspberryHandler,\n  [sendingAction]: raspberryHandler,\n  [actionSent]: raspberryHandler,\n});\n"]}