{"version":3,"sources":["webSocket/index.js"],"names":[],"mappings":"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","file":"webSocket/index.js","sourcesContent":["import socketio from 'socket.io';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport * as raspberriesManager from '../server/raspberriesManager';\nimport { readFileSync } from 'fs';\nimport { createServer } from 'https';\n\nconst logger = new ConsoleLogger('app.webSocket', LogLevel.INFO);\nlet io;\n\nexport function broadcast(type, data) {\n    logger.info('broadcast', { type, data });\n    io.emit(type, data);\n}\n\nconst dirname = __dirname;\nexport function start(config) {\n    if (io) {\n        throw new Error('Already started');\n    }\n\n    if (!config.has('webSocketPort')) {\n        throw new Error('Missing config webSocketPort');\n    }\n\n    const options = {\n        key: readFileSync(`${dirname}/../../config/cert/server.key`),\n        cert: readFileSync(`${dirname}/../../config/cert/server.crt`),\n    };\n\n    const server = createServer(options);\n    server.listen(config.get('webSocketPort'));\n    io = socketio(server);\n    io.on('connection', socket => {\n        logger.info('connected', { id: socket.id });\n        socket.emit('hello', {\n            version: config.get('version'),\n            raspberries: raspberriesManager.getAll(),\n        });\n\n\n        socket.on('raspberry:changeConfig', (id, config, callback) => {\n            const newConfig = raspberriesManager.changeConfig(id, config, callback);\n            if (!newConfig) {\n                callback();\n            } else {\n                callback(newConfig);\n                const raspberry = raspberriesManager.getById(id);\n                socket.broadcast.emit('raspberry:update', raspberry);\n            }\n        });\n\n        socket.on('raspberry:sendAction', (ids, action, callback) => {\n            ids.forEach(id => {\n                const raspberry = raspberriesManager.sendAction(id, action);\n                if (raspberry) {\n                    socket.broadcast.emit('raspberry:update', raspberry);\n                }\n            });\n            callback();\n        });\n\n        socket.on('raspberry:add', (mac, info, callback) => {\n            const newRaspberry = raspberriesManager.add(mac, info);\n            if (!newRaspberry) {\n                callback(false);\n            } else {\n                callback(newRaspberry);\n                socket.broadcast.emit('raspberry:update', newRaspberry);\n                if (newRaspberry.id !== mac) {\n                    socket.broadcast.emit('raspberry:update', newRaspberry);\n\n                }\n            }\n        });\n\n        socket.on('disconnect', () => {\n            logger.info('disconnected', { id: socket.id });\n        });\n    });\n\n    io.on('error', logger.error);\n}\n"],"sourceRoot":"/"}