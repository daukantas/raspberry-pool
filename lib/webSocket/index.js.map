{"version":3,"sources":["webSocket/index.js"],"names":[],"mappings":";;;;;QAOgB;QAKA;;AAZhB;;;;AACA;;;;AACA;;IAAY;;;;;;AAEZ,MAAM,SAAS,0BAAW,eAAX,CAAT;AACN,IAAI,EAAJ;;AAEO,SAAS,SAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B;AAClC,WAAO,IAAP,CAAY,WAAZ,EAAyB,EAAE,UAAF,EAAQ,UAAR,EAAzB,EADkC;AAElC,OAAG,EAAH,CAAM,aAAN,EAAqB,IAArB,CAA0B,IAA1B,EAAgC,IAAhC,EAFkC;CAA/B;;AAKA,SAAS,IAAT,CAAc,GAAd,EAAmB;AACtB,SAAK,4BAAU,GAAV,CAAL,CADsB;;AAGtB,OAAG,EAAH,CAAM,YAAN,EAAoB,UAAU;AAC1B,eAAO,EAAP,CAAU,uBAAV,EAAmC,YAAc;AAC7C,mBAAO,IAAP,CAAY,aAAZ,EAD6C;AAE7C,qBAAS,EAAE,aAAa,mBAAmB,MAAnB,EAAb,EAAX,EAF6C;SAAd,CAAnC,CAD0B;;AAM1B,eAAO,EAAP,CAAU,yBAAV,EAAqC,MAAM;AACvC,mBAAO,KAAP,CAAa,aAAb,EADuC;SAAN,CAArC,CAN0B;;AAU1B,eAAO,EAAP,CAAU,wBAAV,EAAoC,CAAC,EAAD,EAAK,MAAL,EAAa,QAAb,KAA0B;AAC1D,kBAAM,YAAY,mBAAmB,YAAnB,CAAgC,EAAhC,EAAoC,MAApC,EAA4C,QAA5C,CAAZ,CADoD;AAE1D,gBAAI,CAAC,SAAD,EAAY;AACZ,2BADY;aAAhB,MAEO;AACH,yBAAS,SAAT,EADG;AAEH,sBAAM,YAAY,mBAAmB,OAAnB,CAA2B,EAA3B,CAAZ,CAFH;AAGH,uBAAO,SAAP,CAAiB,EAAjB,CAAoB,aAApB,EAAmC,IAAnC,CAAwC,kBAAxC,EAA4D,SAA5D,EAHG;aAFP;SAFgC,CAApC,CAV0B;;AAqB1B,eAAO,EAAP,CAAU,sBAAV,EAAkC,CAAC,GAAD,EAAM,MAAN,EAAc,QAAd,KAA2B;AACzD,gBAAI,OAAJ,CAAY,MAAM;AACd,sBAAM,YAAY,mBAAmB,UAAnB,CAA8B,EAA9B,EAAkC,MAAlC,CAAZ,CADQ;AAEd,oBAAI,SAAJ,EAAe;AACX,2BAAO,SAAP,CAAiB,EAAjB,CAAoB,aAApB,EAAmC,IAAnC,CAAwC,kBAAxC,EAA4D,SAA5D,EADW;iBAAf;aAFQ,CAAZ,CADyD;AAOzD,uBAPyD;SAA3B,CAAlC,CArB0B;;AA+B1B,eAAO,EAAP,CAAU,eAAV,EAA2B,CAAC,GAAD,EAAM,IAAN,EAAY,QAAZ,KAAyB;AAChD,kBAAM,eAAe,mBAAmB,GAAnB,CAAuB,GAAvB,EAA4B,IAA5B,CAAf,CAD0C;AAEhD,gBAAI,CAAC,YAAD,EAAe;AACf,yBAAS,KAAT,EADe;aAAnB,MAEO;AACH,yBAAS,YAAT,EADG;AAEH,uBAAO,SAAP,CAAiB,EAAjB,CAAoB,aAApB,EAAmC,IAAnC,CAAwC,kBAAxC,EAA4D,YAA5D,EAFG;AAGH,oBAAI,aAAa,EAAb,KAAoB,GAApB,EAAyB;AACzB,2BAAO,SAAP,CAAiB,EAAjB,CAAoB,aAApB,EAAmC,IAAnC,CAAwC,kBAAxC,EAA4D,YAA5D,EADyB;iBAA7B;aALJ;SAFuB,CAA3B,CA/B0B;KAAV,CAApB,CAHsB;CAAnB","file":"webSocket/index.js","sourcesContent":["import websocket from 'alp-websocket';\nimport Logger from 'nightingale';\nimport * as raspberriesManager from '../server/raspberriesManager';\n\nconst logger = new Logger('app.webSocket');\nlet io;\n\nexport function broadcast(type, data) {\n    logger.info('broadcast', { type, data });\n    io.to('raspberries').emit(type, data);\n}\n\nexport function init(app) {\n    io = websocket(app);\n\n    io.on('connection', socket => {\n        socket.on('subscribe:raspberries', (callback) => {\n            socket.join('raspberries');\n            callback({ raspberries: raspberriesManager.getAll() });\n        });\n\n        socket.on('unsubscribe:raspberries', () => {\n            socket.leave('raspberries');\n        });\n\n        socket.on('raspberry:changeConfig', (id, config, callback) => {\n            const newConfig = raspberriesManager.changeConfig(id, config, callback);\n            if (!newConfig) {\n                callback();\n            } else {\n                callback(newConfig);\n                const raspberry = raspberriesManager.getById(id);\n                socket.broadcast.to('raspberries').emit('raspberry:update', raspberry);\n            }\n        });\n\n        socket.on('raspberry:sendAction', (ids, action, callback) => {\n            ids.forEach(id => {\n                const raspberry = raspberriesManager.sendAction(id, action);\n                if (raspberry) {\n                    socket.broadcast.to('raspberries').emit('raspberry:update', raspberry);\n                }\n            });\n            callback();\n        });\n\n        socket.on('raspberry:add', (mac, info, callback) => {\n            const newRaspberry = raspberriesManager.add(mac, info);\n            if (!newRaspberry) {\n                callback(false);\n            } else {\n                callback(newRaspberry);\n                socket.broadcast.to('raspberries').emit('raspberry:update', newRaspberry);\n                if (newRaspberry.id !== mac) {\n                    socket.broadcast.to('raspberries').emit('raspberry:update', newRaspberry);\n                }\n            }\n        });\n    });\n}\n"],"sourceRoot":"/"}