{"version":3,"sources":["views/components/raspberry/ActionsComponent.jsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqB,gB,sBAAN,MAAM,gBAAN,0BAAyC;AAAA;AAAA;;AAAA,iDAMpD,qBANoD;AAAA;;AAQpD,aAAS;AAAA,qBAC+B,KAAK,KADpC;AAAA,cACG,WADH,UACG,WADH;AAAA,cACgB,UADhB,UACgB,UADhB;;;AAGL,YAAI,CAAC,WAAD,IAAgB,CAAC,YAAY,MAAjC,EAAyC;AACrC,mBAAO,uCAAK,WAAU,SAAf,GAAP;AACH;;AAED,cAAM,mBAAmB,2BACpB,GADoB,CAChB;AAAA,gCACE,MADF;AAED,6BAAa,YAAY,MAAZ,CAAmB;AAAA,2BAAK,EAAE,MAAF,IAAY,OAAO,SAAP,CAAiB,CAAjB,CAAjB;AAAA,iBAAnB;AAFZ;AAAA,SADgB,EAKpB,MALoB,CAKb;AAAA,mBAAU,OAAO,WAAP,CAAmB,MAAnB,GAA4B,CAAtC;AAAA,SALa,CAAzB;;AAOA,YAAI,CAAC,iBAAiB,MAAtB,EAA8B;AAC1B,mBAAO,uCAAK,WAAU,SAAf,GAAP;AACH;;AAED,eAAQ;AAAA;YAAA,EAAK,WAAU,yBAAf;YAAA;YAEJ;AAAA;gBAAA,EAAI,WAAU,MAAd;gBACK,iBAAiB,GAAjB,CAAqB;AAAA,2BAClB;AAAA;wBAAA,EAAI,KAAK,OAAO,KAAhB;AACI,qCAAS,MAAM;AACX,sCAAM,cAAc,OAAO,WAAP,CAAmB,MAAnB,CAA0B;AAAA,2CAAa,CAAC,OAAO,YAAP,CAAoB,SAApB,CAAd;AAAA,iCAA1B,CAApB;AACA,oCAAI,YAAY,MAAhB,EAAwB;AACpB,2CAAO,WAAW,WAAX,EAAwB,OAAO,KAA/B,CAAP;AACH;AACJ;AANL;wBAQK,OAAO,IARZ;wBASI,4DAAS,QAAQ,CAAC,CAAC,YAAY,MAAZ,CAAmB;AAAA,uCAClC,UAAU,OAAV,IAAqB,UAAU,OAAV,CAAkB,OAAO,KAAzB,MAAoC,SAAzD,IAAsE,OAAO,YAAP,CAAoB,SAApB,CADpC;AAAA,6BAAnB,EAEhB,MAFH;AATJ,qBADkB;AAAA,iBAArB;AADL;AAFI,SAAR;AAoBH;AA9CmD,C,SAC7C,S,GAAY;AACf,iBAAa,iBAAU,KAAV,CAAgB,UADd;AAEf,gBAAY,iBAAU,IAAV,CAAe;AAFZ,C;kBADF,gB","file":"views/components/raspberry/ActionsComponent.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport actions from '../../raspberryActions';\nimport Spinner from '../SpinnerComponent';\n\nexport default class ActionsComponent extends Component {\n    static propTypes = {\n        raspberries: PropTypes.array.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberries, sendAction } = this.props;\n\n        if (!raspberries || !raspberries.length) {\n            return <div className=\"actions\" />;\n        }\n\n        const availableActions = actions\n            .map(action => ({\n                ...action,\n                raspberries: raspberries.filter(r => r.online && action.isVisible(r)),\n            }))\n            .filter(action => action.raspberries.length > 0);\n\n        if (!availableActions.length) {\n            return <div className=\"actions\" />;\n        }\n\n        return (<div className=\"actions dropdown button\">\n            Actions\n            <ul className=\"list\">\n                {availableActions.map(action => (\n                    <li key={action.value}\n                        onClick={() => {\n                            const raspberries = action.raspberries.filter(raspberry => !action.isInProgress(raspberry));\n                            if (raspberries.length) {\n                                return sendAction(raspberries, action.value);\n                            }\n                        }}\n                    >\n                        {action.name}\n                        <Spinner active={!!raspberries.filter(raspberry => (\n                            raspberry.actions && raspberry.actions[action.value] === 'sending' || action.isInProgress(raspberry)\n                        )).length} />\n                    </li>\n                ))}\n            </ul>\n        </div>);\n    }\n}\n"],"sourceRoot":"/"}