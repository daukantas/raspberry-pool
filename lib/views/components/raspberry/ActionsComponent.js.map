{"version":3,"sources":["views/components/raspberry/ActionsComponent.jsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,8BAAoD;;;;AACpD,sDAAmE;;;;AACnE,0DAA6C;;;;AAC7C,uDAA0C;;;;;;IAErB,gBAAgB,sBAAtB,MAAM,gBAAgB,0BAAmB;;;;iDAMpD,qBAAqB;;;AAErB,UAAM,GAAG;qBAC+B,IAAI,CAAC,KAAK;cAAtC,WAAW,UAAX,WAAW;cAAE,UAAU,UAAV,UAAU;;AAE/B,YAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;AACrC,mBAAO,uCAAK,SAAS,EAAC,SAAS,GAAG,CAAC;SACtC;;AAED,cAAM,gBAAgB,GAAG,2BACpB,GAAG,CAAC,MAAM,iBACJ,MAAM;AACT,uBAAW,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;UACvE,CAAC,CACF,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;AAErD,YAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;AAC1B,mBAAO,uCAAK,SAAS,EAAC,SAAS,GAAG,CAAC;SACtC;;AAED,eAAQ;;cAAK,SAAS,EAAC,yBAAyB;;YAE5C;;kBAAI,SAAS,EAAC,MAAM;gBACf,gBAAgB,CAAC,GAAG,CAAC,MAAM,IACxB;;sBAAI,GAAG,EAAE,MAAM,CAAC,KAAK,AAAC;AAClB,+BAAO,EAAE,MAAM;AACX,kCAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;AAC5F,gCAAI,WAAW,CAAC,MAAM,EAAE;AACpB,uCAAO,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;6BAChD;yBACJ,AAAC;;oBAED,MAAM,CAAC,IAAI;oBACZ,4DAAS,MAAM,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,IAC3C,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,SAAS,IAAI,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,AACvG,CAAC,CAAC,MAAM,AAAC,GAAG;iBACZ,AACR,CAAC;aACD;SACH,CAAE;KACX;CACJ,SA9CU,SAAS,GAAG;AACf,eAAW,EAAE,iBAAU,KAAK,CAAC,UAAU;AACvC,cAAU,EAAE,iBAAU,IAAI,CAAC,UAAU;CACxC;kBAJgB,gBAAgB","file":"views/components/raspberry/ActionsComponent.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport actions from '../../raspberryActions';\nimport Spinner from '../SpinnerComponent';\n\nexport default class ActionsComponent extends Component {\n    static propTypes = {\n        raspberries: PropTypes.array.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberries, sendAction } = this.props;\n\n        if (!raspberries || !raspberries.length) {\n            return <div className=\"actions\" />;\n        }\n\n        const availableActions = actions\n            .map(action => ({\n                ...action,\n                raspberries: raspberries.filter(r => r.online && action.isVisible(r)),\n            }))\n            .filter(action => action.raspberries.length > 0);\n\n        if (!availableActions.length) {\n            return <div className=\"actions\" />;\n        }\n\n        return (<div className=\"actions dropdown button\">\n            Actions\n            <ul className=\"list\">\n                {availableActions.map(action => (\n                    <li key={action.value}\n                        onClick={() => {\n                            const raspberries = action.raspberries.filter(raspberry => !action.isInProgress(raspberry));\n                            if (raspberries.length) {\n                                return sendAction(raspberries, action.value);\n                            }\n                        }}\n                    >\n                        {action.name}\n                        <Spinner active={!!raspberries.filter(raspberry => (\n                            raspberry.actions && raspberry.actions[action.value] === 'sending' || action.isInProgress(raspberry)\n                        )).length} />\n                    </li>\n                ))}\n            </ul>\n        </div>);\n    }\n}\n"],"sourceRoot":"/"}