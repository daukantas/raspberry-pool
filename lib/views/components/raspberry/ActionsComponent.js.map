{"version":3,"sources":["views/components/raspberry/ActionsComponent.jsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqB,sCAAN,MAAM,gBAAN,0BAAyC;;;;iDAMpD;KANoD;;AAQpD,aAAS;qBAC+B,KAAK,KAAL,CAD/B;cACG,iCADH;cACgB,+BADhB;;;AAGL,YAAI,CAAC,WAAD,IAAgB,CAAC,YAAY,MAAZ,EAAoB;AACrC,mBAAO,uCAAK,WAAU,SAAV,EAAL,CAAP,CADqC;SAAzC;;AAIA,cAAM,mBAAmB,2BACpB,GADoB,CAChB;gCACE;AACH,6BAAa,YAAY,MAAZ,CAAmB;2BAAK,EAAE,MAAF,IAAY,OAAO,SAAP,CAAiB,CAAjB,CAAZ;iBAAL,CAAhC;;SAFC,CADgB,CAKpB,MALoB,CAKb;mBAAU,OAAO,WAAP,CAAmB,MAAnB,GAA4B,CAA5B;SAAV,CALN,CAPD;;AAcL,YAAI,CAAC,iBAAiB,MAAjB,EAAyB;AAC1B,mBAAO,uCAAK,WAAU,SAAV,EAAL,CAAP,CAD0B;SAA9B;;AAIA,eAAQ;;cAAK,WAAU,yBAAV,EAAL;;YAEJ;;kBAAI,WAAU,MAAV,EAAJ;gBACK,iBAAiB,GAAjB,CAAqB;2BAClB;;0BAAI,KAAK,OAAO,KAAP;AACL,qCAAS,MAAM;AACX,sCAAM,cAAc,OAAO,WAAP,CAAmB,MAAnB,CAA0B;2CAAa,CAAC,OAAO,YAAP,CAAoB,SAApB,CAAD;iCAAb,CAAxC,CADK;AAEX,oCAAI,YAAY,MAAZ,EAAoB;AACpB,2CAAO,WAAW,WAAX,EAAwB,OAAO,KAAP,CAA/B,CADoB;iCAAxB;6BAFK;yBADb;wBAQK,OAAO,IAAP;wBACD,4DAAS,QAAQ,CAAC,CAAC,YAAY,MAAZ,CAAmB;uCAClC,UAAU,OAAV,IAAqB,UAAU,OAAV,CAAkB,OAAO,KAAP,CAAlB,KAAoC,SAApC,IAAiD,OAAO,YAAP,CAAoB,SAApB,CAAtE;6BADkC,CAAnB,CAEhB,MAFgB,EAAnB,CATJ;;iBADkB,CAD1B;aAFI;SAAR,CAlBK;KAAT;CARW,SACJ,YAAY;AACf,iBAAa,iBAAU,KAAV,CAAgB,UAAhB;AACb,gBAAY,iBAAU,IAAV,CAAe,UAAf;;kBAHC","file":"views/components/raspberry/ActionsComponent.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport actions from '../../raspberryActions';\nimport Spinner from '../SpinnerComponent';\n\nexport default class ActionsComponent extends Component {\n    static propTypes = {\n        raspberries: PropTypes.array.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberries, sendAction } = this.props;\n\n        if (!raspberries || !raspberries.length) {\n            return <div className=\"actions\" />;\n        }\n\n        const availableActions = actions\n            .map(action => ({\n                ...action,\n                raspberries: raspberries.filter(r => r.online && action.isVisible(r)),\n            }))\n            .filter(action => action.raspberries.length > 0);\n\n        if (!availableActions.length) {\n            return <div className=\"actions\" />;\n        }\n\n        return (<div className=\"actions dropdown button\">\n            Actions\n            <ul className=\"list\">\n                {availableActions.map(action => (\n                    <li key={action.value}\n                        onClick={() => {\n                            const raspberries = action.raspberries.filter(raspberry => !action.isInProgress(raspberry));\n                            if (raspberries.length) {\n                                return sendAction(raspberries, action.value);\n                            }\n                        }}\n                    >\n                        {action.name}\n                        <Spinner active={!!raspberries.filter(raspberry => (\n                            raspberry.actions && raspberry.actions[action.value] === 'sending' || action.isInProgress(raspberry)\n                        )).length} />\n                    </li>\n                ))}\n            </ul>\n        </div>);\n    }\n}\n"],"sourceRoot":"/"}