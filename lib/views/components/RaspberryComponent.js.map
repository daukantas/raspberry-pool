{"version":3,"sources":["views/components/RaspberryComponent.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAIqB,kBAAkB,qBAAxB,MAAM,kBAAkB,0BAAmB;;AAOtD,eAAW,CAAC,KAAK,EAAE;AACf,aAAK,CAAC,KAAK,CAAC,CAAC;aAIjB,qBAAqB;AAHjB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;KACnB;;AAID,UAAM,GAAG;qBAC2C,IAAI,CAAC,KAAK;cAAlD,SAAS,UAAT,SAAS;cAAE,YAAY,UAAZ,YAAY;cAAE,UAAU,UAAV,UAAU;;AAE3C,YAAI,GAAG,CAAC;AACR,YAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,EAAE;AACxB,eAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;SACxB,MAAM,IAAI,SAAS,CAAC,MAAM,EAAE;AACzB,eAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;SAC5B,MAAM;AACH,eAAG,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;SACnC;;AAED,eAAQ;;cAAK,SAAS,EAAC,WAAW;YAC9B;;kBAAI,SAAS,EAAC,YAAY;gBAAE,SAAS,CAAC,IAAI,CAAC,IAAI;aAAM;YACrD,4DAAS,MAAM,EAAE,SAAS,CAAC,MAAM,AAAC,GAAG;YACrC;;kBAAM,SAAS,EAAE,CAAC,aAAa,GAAE,SAAS,CAAC,MAAM,GAAG,SAAS,GAAG,SAAS,EAAC,CAAC,AAAC;gBACvE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAE,SAAS,CAAC,EAAE,EAAC,CAAC,GAAE,SAAS,CAAC,MAAM,EAAC,CAAC,GAAG,SAAS;aAClE;YAEP;;kBAAK,SAAS,EAAC,YAAY;gBACvB,yCAAO,IAAI,EAAC,KAAK,EAAC,QAAQ,MAAA;AACtB,6BAAS,EAAE,CAAC,SAAS,GAAE,GAAG,GAAG,EAAE,GAAG,kBAAkB,EAAC,CAAC,AAAC;AACvD,yBAAK,EAAE,GAAG,AAAC;AACX,gCAAY,EAAC,KAAK;AAClB,4BAAQ,EAAE,AAAC,CAAC,IAAK,IAAI,CAAC,QAAQ,CAAC;AAC3B,2BAAG,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK;qBAC5E,CAAC,AAAC;kBACL;gBACF;;sBAAO,OAAO,EAAE,CAAC,cAAc,GAAE,SAAS,CAAC,EAAE,EAAC,CAAC,AAAC;;iBAAY;aAC1D;YAEN;;kBAAK,SAAS,EAAC,kBAAkB;gBAC7B;;sBAAQ,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,AAAC,EAAC,OAAO,EAAE,MAAM;AAChF,kCAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;AAC3B,gCAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;AAC3C,wCAAY,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;yBACpC,AAAC;;iBAAc;gBAChB;;sBAAQ,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,AAAC;AAC7E,+BAAO,EAAE,MAAM,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,AAAC;;iBAAgC;aACtF;SACJ,CAAE;KACX;CACJ,SAvDU,SAAS,GAAG;AACf,aAAS,EAAE,iBAAU,MAAM,CAAC,UAAU;AACtC,gBAAY,EAAE,iBAAU,IAAI,CAAC,UAAU;AACvC,cAAU,EAAE,iBAAU,IAAI,CAAC,UAAU;CACxC;kBALgB,kBAAkB","file":"views/components/RaspberryComponent.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport Spinner from './SpinnerComponent';\n\nexport default class RaspberryComponent extends Component {\n    static propTypes = {\n        raspberry: PropTypes.object.isRequired,\n        changeConfig: PropTypes.func.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberry, changeConfig, sendAction } = this.props;\n\n        let url;\n        if (this.state.url != null) {\n            url = this.state.url;\n        } else if (raspberry.saving) {\n            url = this.state.lastUrl;\n        } else {\n            url = raspberry.data.config.url;\n        }\n\n        return (<div className=\"raspberry\">\n            <h2 className=\"text-title\">{raspberry.data.name}</h2>\n            <Spinner active={raspberry.saving} />\n            <span className={`status label ${raspberry.online ? 'success' : 'warning'}`}>\n                {raspberry.online ? `${raspberry.ip} ${raspberry.online}` : 'Offline'}\n            </span>\n\n            <div className=\"input text\">\n                <input type=\"url\" required\n                    className={`has-value${url ? '' : ' has-empty-value'}`}\n                    value={url}\n                    autoComplete=\"off\"\n                    onChange={(e) => this.setState({\n                        url: raspberry.data.config.url === e.target.value ? null : e.target.value\n                    })}\n                />\n                <label htmlFor={`raspberry-url-${raspberry.id}`}>URL</label>\n            </div>\n\n            <div className=\"button-container\">\n                <button type=\"button\" disabled={raspberry.saving || !this.state.url} onClick={() => {\n                    const url = this.state.url;\n                    this.setState({ url: null, lastUrl: url });\n                    changeConfig(raspberry, { url });\n                }}>Save</button>\n                <button type=\"button\" disabled={!raspberry.online || raspberry.refresh === 'sending'}\n                        onClick={() => sendAction(raspberry, 'refresh')}>Refresh page on screen</button>\n            </div>\n        </div>);\n    }\n}\n"],"sourceRoot":"/"}