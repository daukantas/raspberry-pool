{"version":3,"sources":["views/components/RaspberryComponent.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAIqB,kBAAkB,qBAAxB,MAAM,kBAAkB,0BAAmB;;AAOtD,eAAW,CAAC,KAAK,EAAE;AACf,aAAK,CAAC,KAAK,CAAC,CAAC;aAIjB,qBAAqB;AAHjB,YAAI,CAAC,KAAK,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;KACtC;;AAID,UAAM,GAAG;qBACmC,IAAI,CAAC,KAAK;cAA1C,SAAS,UAAT,SAAS;cAAE,IAAI,UAAJ,IAAI;cAAE,UAAU,UAAV,UAAU;cAC3B,UAAU,GAAK,IAAI,CAAC,KAAK,CAAzB,UAAU;;AAClB,cAAM,GAAG,GAAG,UAAU,IAAI,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;;AAE5E,eAAQ;;cAAK,SAAS,EAAC,WAAW;YAC9B;;kBAAI,SAAS,EAAC,YAAY;gBAAE,SAAS,CAAC,IAAI;aAAM;YAChD,4DAAS,MAAM,EAAE,SAAS,CAAC,MAAM,AAAC,GAAG;YACrC;;kBAAM,SAAS,EAAE,CAAC,aAAa,GAAE,SAAS,CAAC,MAAM,GAAG,SAAS,GAAG,SAAS,EAAC,CAAC,AAAC;gBACvE,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS;aAC9H;YACP;;kBAAM,SAAS,EAAC,cAAc;gBAAE,SAAS,CAAC,GAAG;aAAQ;YAErD;;kBAAK,SAAS,EAAC,YAAY;gBACvB,yCAAO,IAAI,EAAC,KAAK,EAAC,QAAQ,MAAA;AACxB,yBAAK,EAAE,GAAG,AAAC;AACX,4BAAQ,EAAE,AAAC,CAAC,IAAK,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,AAAC;kBAC1E;gBACF;;sBAAO,OAAO,EAAE,CAAC,cAAc,GAAE,SAAS,CAAC,EAAE,EAAC,CAAC,AAAC;;iBAAY;aAC1D;YAEN;;kBAAK,SAAS,EAAC,kBAAkB;gBAC7B;;sBAAQ,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,GAAG,AAAC,EAAC,OAAO,EAAE,MAAM;AACrF,gCAAI,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AACzB,gCAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;yBACxC,AAAC;;iBAAc;gBAChB;;sBAAQ,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,MAAM,AAAC,EAAC,OAAO,EAAE,MAAM,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,AAAC;;iBAAgC;aACjI;SACJ,CAAE;KACX;CACJ,SA3CU,SAAS,GAAG;AACf,aAAS,EAAE,iBAAU,MAAM,CAAC,UAAU;AACtC,QAAI,EAAE,iBAAU,IAAI,CAAC,UAAU;AAC/B,cAAU,EAAE,iBAAU,IAAI,CAAC,UAAU;CACxC;kBALgB,kBAAkB","file":"views/components/RaspberryComponent.js","sourcesContent":["import shouldPureComponentUpdate from 'react-pure-render/function';\nimport React, { Component, PropTypes } from 'react';\nimport Spinner from './SpinnerComponent';\n\nexport default class RaspberryComponent extends Component {\n    static propTypes = {\n        raspberry: PropTypes.object.isRequired,\n        save: PropTypes.func.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { urlChanged: false };\n    }\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberry, save, sendAction } = this.props;\n        const { urlChanged } = this.state;\n        const url = urlChanged || raspberry.saving ? this.state.url : raspberry.url;\n\n        return (<div className=\"raspberry\">\n            <h2 className=\"text-title\">{raspberry.name}</h2>\n            <Spinner active={raspberry.saving} />\n            <span className={`status label ${raspberry.online ? 'success' : 'warning'}`}>\n                {raspberry.online ? Object.keys(raspberry.networks).map(mac => raspberry.networks[mac].ip).filter(Boolean).join(', ') : 'Offline'}\n            </span>\n            <span className=\"text-caption\">{raspberry.mac}</span>\n\n            <div className=\"input text\">\n                <input type=\"url\" required\n                  value={url}\n                  onChange={(e) => this.setState({ urlChanged: true, url: e.target.value })}\n                />\n                <label htmlFor={`raspberry-url-${raspberry.id}`}>URL</label>\n            </div>\n\n            <div className=\"button-container\">\n                <button type=\"button\" disabled={raspberry.saving || url == raspberry.url} onClick={() => {\n                    save(raspberry, { url });\n                    this.setState({ urlChanged: false });\n                }}>Save</button>\n                <button type=\"button\" disabled={!raspberry.online} onClick={() => sendAction(raspberry, 'refresh')}>Refresh page on screen</button>\n            </div>\n        </div>);\n    }\n}\n"],"sourceRoot":"/"}