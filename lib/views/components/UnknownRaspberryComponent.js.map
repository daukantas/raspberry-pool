{"version":3,"sources":["views/components/UnknownRaspberryComponent.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAIqB,yBAAyB,qBAA/B,MAAM,yBAAyB,0BAAmB;;AAO7D,eAAW,CAAC,KAAK,EAAE;AACf,aAAK,CAAC,KAAK,CAAC,CAAC;aAIjB,qBAAqB;AAHjB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;KACnB;;AAID,UAAM,GAAG;qBAC0C,IAAI,CAAC,KAAK;cAAjD,SAAS,UAAT,SAAS;cAAE,WAAW,UAAX,WAAW;cAAE,UAAU,UAAV,UAAU;;kCAC/B,IAAI,CAAC,KAAK;;AAErB,eAAQ;;cAAK,SAAS,EAAC,mBAAmB;YACtC;;kBAAI,SAAS,EAAC,YAAY;gBAAE,SAAS,CAAC,MAAM;aAAM;YAClD,4DAAS,MAAM,EAAE,SAAS,CAAC,MAAM,AAAC,GAAG;YACrC;;kBAAM,SAAS,EAAE,CAAC,YAAY,CAAC,AAAC;gBAAE,SAAS,CAAC,EAAE;aAAQ;YAEtD;;kBAAK,SAAS,EAAC,YAAY;gBACvB,yCAAO,IAAI,EAAC,MAAM,EAAC,QAAQ,MAAA,EAAC,YAAY,EAAC,KAAK;AAC1C,6BAAS,EAAE,CAAC,GAAE,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,GAAG,EAAE,GAAG,CAAC,SAAS,GAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,GAAG,kBAAkB,EAAC,CAAC,EAAC,CAAC,AAAC;AAC7G,yBAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,AAAC;AACvB,4BAAQ,EAAE,AAAC,CAAC,IAAK,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,AAAC;kBAC3D;gBACF;;sBAAO,OAAO,EAAE,CAAC,cAAc,GAAE,SAAS,CAAC,EAAE,EAAC,CAAC,AAAC;;iBAAa;aAC3D;YAEN;;kBAAK,SAAS,EAAC,kBAAkB;gBAC7B;;sBAAQ,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,AAAC,EAAC,OAAO,EAAE,MAAM;AACnF,uCAAW,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;yBACrD,AAAC;;iBAAa;aACb;SACJ;;;;;;;AAAE,KAOX;CACJ,SA5CU,SAAS,GAAG;AACf,aAAS,EAAE,iBAAU,MAAM,CAAC,UAAU;AACtC,eAAW,EAAE,iBAAU,IAAI,CAAC,UAAU;AACtC,cAAU,EAAE,iBAAU,IAAI,CAAC,UAAU;CACxC;kBALgB,yBAAyB","file":"views/components/UnknownRaspberryComponent.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport Spinner from './SpinnerComponent';\n\nexport default class UnknownRaspberryComponent extends Component {\n    static propTypes = {\n        raspberry: PropTypes.object.isRequired,\n        saveUnknown: PropTypes.func.isRequired,\n        sendAction: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    render() {\n        const { raspberry, saveUnknown, sendAction } = this.props;\n        const {} = this.state;\n\n        return (<div className=\"raspberry unknown\">\n            <h2 className=\"text-title\">{raspberry.online}</h2>\n            <Spinner active={raspberry.saving} />\n            <span className={`status label`}>{raspberry.ip}</span>\n\n            <div className=\"input text\">\n                <input type=\"text\" required autoComplete=\"off\"\n                    className={`${this.state.name === undefined ? '' : `has-value${this.state.name ? '' : ' has-empty-value'}`}`}\n                    value={this.state.name}\n                    onChange={(e) => this.setState({ name: e.target.value })}\n                />\n                <label htmlFor={`raspberry-url-${raspberry.id}`}>Name</label>\n            </div>\n\n            <div className=\"button-container\">\n                <button type=\"button\" disabled={!this.state.name || !!raspberry.saving} onClick={() => {\n                    saveUnknown(raspberry, { name: this.state.name });\n                }}>Add</button>\n            </div>\n        </div>);\n        /*\n                <button type=\"button\" onClick={() => {\n                    sendAction(raspberry, 'blink');\n                    this.setState({ urlChanged: false });\n                }}>Blink</button>\n        */\n    }\n}\n"],"sourceRoot":"/"}