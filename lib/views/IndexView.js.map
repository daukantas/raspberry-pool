{"version":3,"sources":["views/IndexView.jsx"],"names":[],"mappings":"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","file":"views/IndexView.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport Header from './components/HeaderComponent';\nimport RaspberryList from './components/RaspberryListComponent';\nimport UnknownRaspberryList from './components/UnknownRaspberryListComponent';\nimport * as raspberriesActions from './actions/raspberry';\nimport { isConnected, emit, on, off } from '../websocket';\n\nclass IndexView extends Component {\n    static propTypes = {\n        registeredRaspberries: PropTypes.array.isRequired,\n        unknownRaspberries: PropTypes.array.isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        setTitle: PropTypes.func.isRequired,\n        context: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.changeConfig = raspberriesActions.changeConfig.bind(null, props.dispatch);\n        this.sendAction = raspberriesActions.sendAction.bind(null, props.dispatch);\n        this.saveUnknown = raspberriesActions.saveUnknown.bind(null, props.dispatch);\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        if (isConnected()) {\n            emit('subscribe:raspberries', ({ raspberries }) => {\n                dispatch(raspberriesActions.updateAll(raspberries));\n            });\n        }\n        this._handlerConnected = on('connect', () => {\n            emit('subscribe:raspberries', ({ raspberries }) => {\n                dispatch(raspberriesActions.updateAll(raspberries));\n            });\n        });\n        this._handlerAdd = on('raspberry:add', (raspberry) => {\n            dispatch(raspberriesActions.add(raspberry));\n        });\n        this._handlerUpdate = on('raspberry:update', (raspberry) => {\n            dispatch(raspberriesActions.update(raspberry));\n        });\n        this._handlerDelete = on('raspberry:delete', (id) => {\n            dispatch(raspberriesActions.remove(id));\n        });\n        this._handlerScreenshot = on('raspberry:screenshot-updated', (id, screenshotDate) => {\n            dispatch(raspberriesActions.screenshotUpdated(id, screenshotDate));\n        });\n    }\n\n    componentWillUnmount() {\n        emit('unsubscribe:raspberries');\n        off('connect', this._handlerConnected);\n        off('raspberry:add', this._handlerAdd);\n        off('raspberry:update', this._handlerUpdate);\n        off('raspberry:delete', this._handlerDelete);\n        off('raspberry:screenshot-updated', this._handlerScreenshot);\n    }\n\n    render() {\n        const { unknownRaspberries, registeredRaspberries } = this.props;\n        const title = this.context.context.t('raspberry-pool.title');\n        this.context.setTitle(title);\n        return (<div>\n            <Header\n                raspberries={registeredRaspberries}\n                sendAction={this.sendAction}\n            />\n            <UnknownRaspberryList\n                raspberries={unknownRaspberries}\n                offlineRaspberries={registeredRaspberries.filter(r => !r.online)}\n                saveUnknown={this.saveUnknown}\n                sendAction={this.sendAction}\n            />\n            <RaspberryList\n                raspberries={registeredRaspberries}\n                changeConfig={this.changeConfig}\n                sendAction={this.sendAction}\n            />\n        </div>);\n    }\n}\n\nexport default connect(({ raspberries }) => ({\n    registeredRaspberries: raspberries.filter(r => r.registered),\n    unknownRaspberries: raspberries.filter(r => !r.registered),\n}))(IndexView);\n"],"sourceRoot":"/"}