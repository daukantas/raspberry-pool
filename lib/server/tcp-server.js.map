{"version":3,"sources":["server/tcp-server.js"],"names":[],"mappings":";;;;;QAMgB,K,GAAA,K;;AANhB;;AACA;;;;AACA;;;;AAEA,MAAM,SAAS,0BAAW,gBAAX,CAAf;;AAEO,SAAS,KAAT,CAAe,MAAf,EAAuB;AAC1B,UAAM,SAAS,uBAAa,UAAU;AAClC,eAAO,IAAP,CAAY,kBAAZ;AACA,YAAI,GAAJ;AACA,cAAM,aAAa,gCAAa,MAAb,CAAnB;;AAEA,cAAM,eAAe,MAAM;AACvB,gBAAI,UAAJ,EAAgB;AACZ,2BAAW,GAAX;AACH;AACJ,SAJD;;AAMA,eAAO,EAAP,CAAU,KAAV,EAAiB,MAAM;AACnB,mBAAO,IAAP,CAAY,qBAAZ;AACA;AACH,SAHD;;AAKA,eAAO,EAAP,CAAU,OAAV,EAAoB,GAAD,IAAS;AACxB,mBAAO,IAAP,CAAY,cAAZ,EAA4B,EAAE,QAAF,EAA5B;AACA;AACH,SAHD;;AAKA,eAAO,UAAP,CAAkB,MAAlB,EAA0B,MAAM;AAC5B,mBAAO,OAAP,CAAe,IAAI,KAAJ,CAAU,SAAV,CAAf;AACH,SAFD;;AAIA,mBAAW,EAAX,CAAc,MAAd,EAAsB,QAAQ;AAC1B,gBAAI,KAAK,IAAL,KAAc,MAAlB,EAA0B;AACtB,uBAAO,KAAP,CAAa,MAAb,EAAqB,EAAE,QAAF,EAArB;AACA;AACH;;AAED,mBAAO,IAAP,CAAY,MAAZ,EAAoB,EAAE,QAAF,EAAO,UAAP,EAApB;;AAEA,gBAAI,KAAK,IAAL,KAAc,OAAlB,EAA2B;AACvB,2BAAW,KAAX,CAAiB,EAAE,MAAM,YAAR,EAAjB;AACA;AACH;AACJ,SAZD;AAaH,KAtCc,CAAf;;AAwCA,UAAM,OAAO,OAAO,GAAP,CAAW,WAAX,EAAwB,GAAxB,CAA4B,MAA5B,CAAb;AACA,WAAO,MAAP,CAAc,IAAd,EAAoB,MAAM;AACtB,eAAO,IAAP,CAAY,WAAZ,EAAyB,EAAE,UAAF,EAAzB;AACH,KAFD;AAGH","file":"server/tcp-server.js","sourcesContent":["import { createServer } from 'net';\nimport Logger from 'nightingale';\nimport { createStream } from 'objectstream';\n\nconst logger = new Logger('app.tcp-server');\n\nexport function start(config) {\n    const server = createServer(socket => {\n        logger.info('client connected');\n        let mac;\n        const jsonStream = createStream(socket);\n\n        const disconnected = () => {\n            if (jsonStream) {\n                jsonStream.end();\n            }\n        };\n\n        socket.on('end', () => {\n            logger.info('client disconnected');\n            disconnected();\n        });\n\n        socket.on('error', (err) => {\n            logger.info('client error', { err });\n            disconnected();\n        });\n\n        socket.setTimeout(120000, () => {\n            socket.destroy(new Error('timeout'));\n        });\n\n        jsonStream.on('data', data => {\n            if (data.type === 'ping') {\n                logger.debug('ping', { mac });\n                return;\n            }\n\n            logger.warn('data', { mac, data });\n\n            if (data.type === 'hello') {\n                jsonStream.write({ type: 'selfUpdate' });\n                return;\n            }\n        });\n    });\n\n    const port = config.get('tcpSocket').get('port');\n    server.listen(port, () => {\n        logger.info('Listening', { port });\n    });\n}\n"],"sourceRoot":"/"}