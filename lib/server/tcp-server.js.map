{"version":3,"sources":["server/tcp-server.js"],"names":[],"mappings":"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","file":"server/tcp-server.js","sourcesContent":["import { createServer } from 'net';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport * as raspberriesManager from './raspberriesManager';\nimport { createStream } from 'objectstream';\nimport { lt as semverLt } from 'semver';\n\nconst logger = new ConsoleLogger('app.tcp-server', LogLevel.INFO);\n\nconst MIN_SUPPORTED_VERSION = '4.1.0';\nconst clients = new Map();\n\nexport function start(config) {\n    const server = createServer(socket => {\n        logger.info('client connected');\n        let mac;\n        const jsonStream = createStream(socket);\n        const pingInterval = setInterval(() => jsonStream.write({ type: 'ping' }), 30000);\n\n        socket.on('end', () => {\n            logger.info('client disconnected');\n            if (mac && clients.get(mac).socket === socket) {\n                clients.delete(mac);\n\n                raspberriesManager.setOffline(mac);\n            }\n\n\n            if (pingInterval) {\n                clearInterval(pingInterval);\n            }\n\n            if (jsonStream) {\n                jsonStream.end();\n            }\n        });\n\n        jsonStream.on('data', data => {\n            if (data.type === 'ping') {\n                logger.debug('ping', { mac });\n                return;\n            }\n\n            logger.info('data', { mac, data });\n\n            if (data.type === 'hello') {\n                if (!data.version || semverLt(data.version, MIN_SUPPORTED_VERSION)) {\n                    jsonStream.write({ type: 'selfUpdate' });\n                    return;\n                }\n\n                mac = data.mac;\n                clients.set(mac, { socket, jsonStream });\n\n                raspberriesManager.setOnline(mac, data.configTime, {\n                    ip: data.ip,\n                    screenState: data.screenState,\n                });\n\n                return;\n            }\n\n            if (data.type === 'update') {\n                const patch = {};\n                ['screenState', 'updating'].forEach(key => {\n                    if (data.hasOwnProperty(key)) {\n                        patch[key] = data[key];\n                    }\n                });\n\n                raspberriesManager.update(mac, patch);\n                return;\n            }\n\n            logger.warn('unsupported instruction by client', data);\n        });\n    });\n\n    const port = config.get('tcpSocketPort');\n    server.listen(port, () => {\n        logger.info('Listening', { port });\n    });\n}\n\nexport function emit(mac, data) {\n    logger.debug('emit', { mac, data });\n    if (!clients.has(mac)) {\n        logger.warn('cannot send message');\n        return;\n    }\n    clients.get(mac).jsonStream.write(data);\n}\n"],"sourceRoot":"/"}