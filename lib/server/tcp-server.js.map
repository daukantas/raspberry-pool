{"version":3,"sources":["server/tcp-server.js"],"names":[],"mappings":"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","file":"server/tcp-server.js","sourcesContent":["import { createServer } from 'net';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport * as raspberriesManager from './raspberriesManager';\nimport { createStream } from 'objectstream';\nimport { lt as semverLt } from 'semver';\n\nconst logger = new ConsoleLogger('app.tcp-server', LogLevel.INFO);\n\nconst MIN_SUPPORTED_VERSION = '4.1.0';\nconst clients = new Map();\n\nexport function start(config) {\n    const server = createServer(socket => {\n        logger.info('client connected');\n        let mac;\n        const jsonStream = createStream(socket);\n        const pingInterval = setInterval(() => jsonStream.write({ type: 'ping' }), 30000);\n\n        const disconnected = () => {\n            if (mac && clients.get(mac).socket === socket) {\n                clients.delete(mac);\n\n                raspberriesManager.setOffline(mac);\n            }\n\n\n            if (pingInterval) {\n                clearInterval(pingInterval);\n            }\n\n            if (jsonStream) {\n                jsonStream.end();\n            }\n        }\n\n        socket.on('end', () => {\n            logger.info('client disconnected');\n            disconnected();\n        });\n\n        socket.on('error', (err) => {\n            logger.info('client error', { err });\n            disconnected();\n        });\n\n        socket.setTimeout(120000, () => {\n            socket.destroy(new Error('timeout'));\n        });\n\n        jsonStream.on('data', data => {\n            if (data.type === 'ping') {\n                logger.debug('ping', { mac });\n                return;\n            }\n\n            logger.info('data', { mac, data });\n\n            if (data.type === 'hello') {\n                if (!data.version || semverLt(data.version, MIN_SUPPORTED_VERSION)) {\n                    jsonStream.write({ type: 'selfUpdate' });\n                    return;\n                }\n\n                mac = data.mac;\n                clients.set(mac, { socket, jsonStream });\n\n                raspberriesManager.setOnline(mac, data.configTime, {\n                    ip: data.ip,\n                    screenState: data.screenState,\n                });\n\n                return;\n            }\n\n            if (data.type === 'update') {\n                const patch = {};\n                ['screenState', 'updating'].forEach(key => {\n                    if (data.hasOwnProperty(key)) {\n                        patch[key] = data[key];\n                    }\n                });\n\n                raspberriesManager.update(mac, patch);\n                return;\n            }\n\n            logger.warn('unsupported instruction by client', data);\n        });\n    });\n\n    const port = config.get('tcpSocket').get('port');\n    server.listen(port, () => {\n        logger.info('Listening', { port });\n    });\n}\n\nexport function emit(mac, data) {\n    logger.debug('emit', { mac, data });\n    if (!clients.has(mac)) {\n        logger.warn('cannot send message');\n        return;\n    }\n    clients.get(mac).jsonStream.write(data);\n}\n"],"sourceRoot":"/"}