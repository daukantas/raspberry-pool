{"version":3,"sources":["server/raspberriesManager.js"],"names":[],"mappings":"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","file":"server/raspberriesManager.js","sourcesContent":["import { ConsoleLogger, LogLevel } from 'nightingale';\nimport * as data from './raspberriesData';\nimport { updateFromAction } from '../common/raspberryActionManager';\nimport * as raspberries from './tcp-server';\nimport * as webSocket from '../webSocket';\n\nconst logger = new ConsoleLogger('app.raspberriesManager', LogLevel.INFO);\nconst map = new Map();\nconst mapByMac = new Map();\n\ndata.items.forEach(item => {\n    const raspberry = {\n        id: item.id,\n        data: item,\n        registered: true,\n        online: false,\n        ip: null,\n    };\n\n    map.set(item.id, raspberry);\n    item.macAddresses.forEach(mac => {\n        if (mapByMac.has(mac)) {\n            throw new Error(`Mac defined more than one: ${mac}`);\n        }\n\n        mapByMac.set(mac, raspberry);\n    });\n});\n\nexport function getById(id) {\n    return map.get(id);\n}\n\nexport function getByMac(mac) {\n    return mapByMac.get(mac);\n}\n\nexport function getAll() {\n    return Array.from(map.values());\n}\n\n/* FROM raspberries */\n\nexport function setOnline(mac, configTime, info) {\n    let raspberry = getByMac(mac);\n    let unknownMac = false;\n    if (!raspberry) {\n        unknownMac = true;\n        logger.warn('unknown mac, adding', { mac });\n        raspberry = { id: mac };\n        map.set(raspberry.id, raspberry);\n        mapByMac.set(mac, raspberry);\n    } else {\n        logger.info('raspberry online', { mac });\n        if (raspberry.updating) {\n            raspberry.updating = false;\n        }\n    }\n\n    raspberry.online = mac;\n    Object.assign(raspberry, info);\n\n    webSocket.broadcast(`raspberry:${unknownMac ? 'add' : 'update'}`, raspberry);\n\n    if (raspberry.data && raspberry.data.config.time !== configTime) {\n        raspberries.emit(raspberry.online, {\n            type: 'change-config',\n            config: raspberry.data.config,\n        });\n    }\n}\n\nexport function update(mac, info) {\n    let raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (info.screenState && raspberry.nextExpectedScreenState === info.screenState) {\n        raspberry.nextExpectedScreenState = null;\n    }\n\n    Object.assign(raspberry, info);\n    webSocket.broadcast(`raspberry:update`, raspberry);\n}\n\nexport function setOffline(mac) {\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (!raspberry.data) {\n        map.delete(mac);\n        mapByMac.delete(mac);\n        webSocket.broadcast('raspberry:delete', raspberry.id);\n    } else {\n        Object.assign(raspberry, {\n            online: false,\n            // keep last known ip\n        });\n\n        webSocket.broadcast('raspberry:update', raspberry);\n    }\n}\n\n/* FROM browser clients */\n\nexport function changeConfig(id, config) {\n    logger.log('changeConfig', { id, config });\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return;\n    }\n\n    const newConfig = data.changeConfig(id, config);\n    raspberries.emit(raspberry.online, { type: 'change-config', config: newConfig });\n    return newConfig;\n}\n\nexport function add(mac, { name, addOrReplace, id }) {\n    logger.log('add', { mac, name, addOrReplace, id });\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        return logger.warn('unknown raspberry', { mac });\n    } else if (raspberry.registered) {\n        return logger.warn('raspberry already registered', { mac });\n    }\n\n    if (addOrReplace) {\n        mapByMac.delete(mac);\n        map.delete(mac);\n        const existing = map.get(id);\n        if (!existing) {\n            return logger.warn('existing not found', { id });\n        }\n\n        if (addOrReplace === 'replace') {\n            existing.data.macAddresses.forEach(mac => mapByMac.delete(mac));\n            data.replaceMacAddresses(id, [mac]);\n        } else {\n            data.addMacAddress(id, mac);\n        }\n        mapByMac.set(mac, existing);\n        existing.online = raspberry.online;\n        existing.ip = raspberry.ip;\n        existing.screenState = raspberry.screenState;\n\n        return existing;\n    } else {\n        raspberry.registered = true;\n        raspberry.data = data.addNew(raspberry.id, mac, name);\n    }\n\n    return raspberry;\n}\n\nexport function sendAction(id, action) {\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return Promise.resolve();\n    }\n\n    Object.assign(raspberry, updateFromAction(action));\n    raspberries.emit(raspberry.online, { type: 'action', action });\n    return raspberry;\n}\n"],"sourceRoot":"/"}