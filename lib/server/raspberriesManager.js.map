{"version":3,"sources":["server/raspberriesManager.js"],"names":[],"mappings":"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","file":"server/raspberriesManager.js","sourcesContent":["import { ConsoleLogger, LogLevel } from 'nightingale';\nimport * as data from './raspberriesData';\nimport { updateFromAction } from '../common/raspberryActionManager';\nimport * as raspberries from './tcp-server';\nimport * as webSocket from '../webSocket';\n\nconst logger = new ConsoleLogger('app.raspberriesManager', LogLevel.INFO);\nconst map = new Map();\nconst mapByMac = new Map();\n\ndata.items.forEach(item => {\n    const raspberry = {\n        id: item.id,\n        data: item,\n        registered: true,\n        online: false,\n        ip: null,\n    };\n\n    map.set(item.id, raspberry);\n    item.macAddresses.forEach(mac => {\n        if (mapByMac.has(mac)) {\n            throw new Error(`Mac defined more than one: ${mac}`);\n        }\n\n        mapByMac.set(mac, raspberry);\n    });\n});\n\nexport function getById(id) {\n    return map.get(id);\n}\n\nexport function getByMac(mac) {\n    return mapByMac.get(mac);\n}\n\nexport function getAll() {\n    return Array.from(map.values());\n}\n\n/* FROM raspberries */\n\nexport function setOnline(mac, configTime, info) {\n    let raspberry = getByMac(mac);\n    let unknownMac = false;\n    if (!raspberry) {\n        unknownMac = true;\n        logger.warn('unknown mac, adding', { mac });\n        raspberry = { id: mac };\n        map.set(raspberry.id, raspberry);\n        mapByMac.set(mac, raspberry);\n    } else {\n        logger.info('raspberry online', { mac });\n        if (raspberry.updating) {\n            raspberry.updating = false;\n        }\n    }\n\n    raspberry.online = mac;\n    Object.assign(raspberry, info);\n\n    webSocket.broadcast(`raspberry:${unknownMac ? 'add' : 'update'}`, raspberry);\n\n    if (raspberry.data && raspberry.data.config.time !== configTime) {\n        raspberries.emit(raspberry.online, {\n            type: 'change-config',\n            config: raspberry.data.config,\n        });\n    }\n}\n\nexport function update(mac, info) {\n    let raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (info.screenState && raspberry.nextExpectedScreenState === info.screenState) {\n        raspberry.nextExpectedScreenState = null;\n    }\n\n    Object.assign(raspberry, info);\n    webSocket.broadcast(`raspberry:update`, raspberry);\n}\n\nexport function setOffline(mac) {\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (!raspberry.data) {\n        map.delete(mac);\n        mapByMac.delete(mac);\n        webSocket.broadcast('raspberry:delete', raspberry.id);\n    } else {\n        Object.assign(raspberry, {\n            online: false,\n            // keep last known ip\n        });\n\n        webSocket.broadcast('raspberry:update', raspberry);\n    }\n}\n\n/* FROM browser clients */\n\nexport function changeConfig(id, config) {\n    logger.log('changeConfig', { id, config });\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return;\n    }\n\n    const newConfig = data.changeConfig(id, config);\n    raspberries.emit(raspberry.online, { type: 'change-config', config: newConfig });\n    return newConfig;\n}\n\nexport function add(mac, { name, addOrReplace, id }) {\n    logger.log('add', { mac, name, addOrReplace, id });\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        return logger.warn('unknown raspberry', { mac });\n    } else if (raspberry.registered) {\n        return logger.warn('raspberry already registered', { mac });\n    }\n\n    if (addOrReplace) {\n        mapByMac.delete(mac);\n        map.delete(mac);\n        const existing = map.get(id);\n        if (!existing) {\n            return logger.warn('existing not found', { id });\n        }\n\n        if (addOrReplace === 'replace') {\n            existing.data.macAddresses.forEach(mac => mapByMac.delete(mac));\n            data.replaceMacAddresses(id, [mac]);\n        } else {\n            data.addMacAddress(id, mac);\n        }\n        mapByMac.set(mac, existing);\n        existing.online = raspberry.online;\n        existing.ip = raspberry.ip;\n        existing.screenState = raspberry.screenState;\n\n        return existing;\n    } else {\n        raspberry.registered = true;\n        raspberry.data = data.addNew(raspberry.id, mac, name);\n    }\n\n    return raspberry;\n}\n\nexport function sendAction(id, action) {\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return Promise.resolve();\n    }\n\n    Object.assign(raspberry, updateFromAction(action));\n    raspberries.emit(raspberry.online, { type: 'action', action });\n    return raspberry;\n}\n"],"sourceRoot":"/"}