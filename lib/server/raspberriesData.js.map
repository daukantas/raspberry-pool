{"version":3,"sources":["server/raspberriesData.js"],"names":[],"mappings":";;;;;;QAoBgB,OAAO,GAAP,OAAO;QAIP,YAAY,GAAZ,YAAY;QAiBZ,MAAM,GAAN,MAAM;;;;;;;;;;AAlCtB,MAAM,YAAY,GAAG,CAAC,GAAE,SAAS,EAAC,4BAA4B,CAAC,CAAC;;AAEzD,MAAM,KAAK,WAAL,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAa,YAAY,CAAC,CAAC,CAAC;AAC5D,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;AAExD,IAAI,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,EAAE;AAC3B,UAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;CACpC;;AAED,SAAS,IAAI,GAAG;AACZ,2BAAc,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;CAC/D;;AAEM,SAAS,OAAO,CAAC,EAAE,EAAE;AACxB,WAAO,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;CACtB;;AAEM,SAAS,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE;AACrC,QAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;AACd,cAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;KACjC;;;AAAA,AAGD,UAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;AACvB,YAAI,EAAE,IAAI,CAAC,GAAG,EAAE;AAChB,eAAO,EAAE,MAAM,CAAC,OAAO,IAAI,OAAO;AAClC,WAAG,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;KACzB,CAAC,CAAC;AACH,OAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;AAC5B,QAAI,EAAE,CAAC;;AAEP,WAAO,MAAM,CAAC;CACjB;;AAAA,AAEM,SAAS,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;AAClC,UAAM,gBAAgB,GAAG;AACrB,UAAE;AACF,YAAI;AACJ,oBAAY,EAAE,CAAC,GAAG,CAAC;AACnB,cAAM,EAAE,EAAE;KACb,CAAC;;AAEF,QAAI,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE;AAC9B,cAAM,IAAI,KAAK,CAAC,CAAC,gBAAgB,GAAE,gBAAgB,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;KAC7D;;AAED,SAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC7B,OAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;AAC/C,QAAI,EAAE,CAAC;;AAEP,WAAO,gBAAgB,CAAC;CAC3B","file":"server/raspberriesData.js","sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\n/* import { slugify as _slugify } from 'transliteration';\n\nfunction slugify(string) {\n    return _slugify(string, { lowercase: true, separator: '-' });\n} */\n\nconst dataFilename = `${__dirname}/../../data/raspberries.json`;\n\nexport const items = JSON.parse(readFileSync(dataFilename));\nconst map = new Map(items.map(item => [item.id, item]));\n\nif (map.size !== items.length) {\n    throw new Error('Duplicated id');\n}\n\nfunction save() {\n    writeFileSync(dataFilename, JSON.stringify(items, null, 4));\n}\n\nexport function getById(id) {\n    return map.get(id);\n}\n\nexport function changeConfig(id, config) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    // TODO configManager\n    config = Object.assign({}, {\n        time: Date.now(),\n        display: config.display || 'kweb3',\n        url: config.url.trim(),\n    });\n    map.get(id).config = config;\n    save();\n\n    return config;\n}\n// ip should not be written\nexport function addNew(id, mac, name) {\n    const newRaspberryItem = {\n        id,\n        name,\n        macAddresses: [mac],\n        config: {},\n    };\n\n    if (map.has(newRaspberryItem.id)) {\n        throw new Error(`Already has id: ${newRaspberryItem.id}`);\n    }\n\n    items.push(newRaspberryItem);\n    map.set(newRaspberryItem.id, newRaspberryItem);\n    save();\n\n    return newRaspberryItem;\n}\n"],"sourceRoot":"/"}