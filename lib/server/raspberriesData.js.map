{"version":3,"sources":["server/raspberriesData.js"],"names":[],"mappings":";;;;;;QAoBgB;QAIA;QAiBA;QAmBA;QASA;;AArEhB;;;;;;;;AAOA,MAAM,eAAe,CAAC,GAAE,SAAH,EAAa,4BAAb,CAAf;;AAEC,MAAM,wBAAQ,KAAK,KAAL,CAAW,sBAAa,YAAb,CAAX,CAAR;AACb,MAAM,MAAM,IAAI,GAAJ,CAAQ,MAAM,GAAN,CAAU;WAAQ,CAAC,KAAK,EAAL,EAAS,IAAV;CAAR,CAAlB,CAAN;;AAEN,IAAI,IAAI,IAAJ,KAAa,MAAM,MAAN,EAAc;AAC3B,UAAM,IAAI,KAAJ,CAAU,eAAV,CAAN,CAD2B;CAA/B;;AAIA,SAAS,IAAT,GAAgB;AACZ,2BAAc,YAAd,EAA4B,KAAK,SAAL,CAAe,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA5B,EADY;CAAhB;;AAIO,SAAS,OAAT,CAAiB,EAAjB,EAAqB;AACxB,WAAO,IAAI,GAAJ,CAAQ,EAAR,CAAP,CADwB;CAArB;;AAIA,SAAS,YAAT,CAAsB,EAAtB,EAA0B,MAA1B,EAAkC;AACrC,QAAI,CAAC,IAAI,GAAJ,CAAQ,EAAR,CAAD,EAAc;AACd,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN,CADc;KAAlB;;;AADqC,UAMrC,GAAS,OAAO,MAAP,CAAc,EAAd,EAAkB;AACvB,cAAM,KAAK,GAAL,EAAN;AACA,iBAAS,OAAO,OAAP,IAAkB,OAAlB;AACT,aAAK,OAAO,GAAP,CAAW,IAAX,EAAL;KAHK,CAAT,CANqC;AAWrC,QAAI,GAAJ,CAAQ,EAAR,EAAY,MAAZ,GAAqB,MAArB,CAXqC;AAYrC,WAZqC;;AAcrC,WAAO,MAAP,CAdqC;CAAlC;;AAiBA,SAAS,MAAT,CAAgB,EAAhB,EAAoB,GAApB,EAAyB,IAAzB,EAA+B;AAClC,UAAM,mBAAmB;AACrB,cADqB;AAErB,kBAFqB;AAGrB,sBAAc,CAAC,GAAD,CAAd;AACA,gBAAQ,EAAR;KAJE,CAD4B;;AAQlC,QAAI,IAAI,GAAJ,CAAQ,iBAAiB,EAAjB,CAAZ,EAAkC;AAC9B,cAAM,IAAI,KAAJ,CAAU,CAAC,gBAAD,GAAmB,iBAAiB,EAAjB,EAAoB,CAAjD,CAAN,CAD8B;KAAlC;;AAIA,UAAM,IAAN,CAAW,gBAAX,EAZkC;AAalC,QAAI,GAAJ,CAAQ,iBAAiB,EAAjB,EAAqB,gBAA7B,EAbkC;AAclC,WAdkC;;AAgBlC,WAAO,gBAAP,CAhBkC;CAA/B;;AAmBA,SAAS,mBAAT,CAA6B,EAA7B,EAAiC,eAAjC,EAAkD;AACrD,QAAI,CAAC,IAAI,GAAJ,CAAQ,EAAR,CAAD,EAAc;AACd,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN,CADc;KAAlB;;AAIA,QAAI,GAAJ,CAAQ,EAAR,EAAY,YAAZ,GAA2B,eAA3B,CALqD;AAMrD,WANqD;CAAlD;;AASA,SAAS,aAAT,CAAuB,EAAvB,EAA2B,aAA3B,EAA0C;AAC7C,QAAI,CAAC,IAAI,GAAJ,CAAQ,EAAR,CAAD,EAAc;AACd,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN,CADc;KAAlB;;AAIA,QAAI,GAAJ,CAAQ,EAAR,EAAY,YAAZ,CAAyB,IAAzB,CAA8B,aAA9B,EAL6C;AAM7C,WAN6C;CAA1C","file":"server/raspberriesData.js","sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\n/* import { slugify as _slugify } from 'transliteration';\n\nfunction slugify(string) {\n    return _slugify(string, { lowercase: true, separator: '-' });\n} */\n\nconst dataFilename = `${__dirname}/../../data/raspberries.json`;\n\nexport const items = JSON.parse(readFileSync(dataFilename));\nconst map = new Map(items.map(item => [item.id, item]));\n\nif (map.size !== items.length) {\n    throw new Error('Duplicated id');\n}\n\nfunction save() {\n    writeFileSync(dataFilename, JSON.stringify(items, null, 4));\n}\n\nexport function getById(id) {\n    return map.get(id);\n}\n\nexport function changeConfig(id, config) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    // TODO configManager\n    config = Object.assign({}, {\n        time: Date.now(),\n        display: config.display || 'kweb3',\n        url: config.url.trim(),\n    });\n    map.get(id).config = config;\n    save();\n\n    return config;\n}\n// ip should not be written\nexport function addNew(id, mac, name) {\n    const newRaspberryItem = {\n        id,\n        name,\n        macAddresses: [mac],\n        config: {},\n    };\n\n    if (map.has(newRaspberryItem.id)) {\n        throw new Error(`Already has id: ${newRaspberryItem.id}`);\n    }\n\n    items.push(newRaspberryItem);\n    map.set(newRaspberryItem.id, newRaspberryItem);\n    save();\n\n    return newRaspberryItem;\n}\n\nexport function replaceMacAddresses(id, newMacAddresses) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    map.get(id).macAddresses = newMacAddresses;\n    save();\n}\n\nexport function addMacAddress(id, newMacAddress) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    map.get(id).macAddresses.push(newMacAddress);\n    save();\n}\n"],"sourceRoot":"/"}