{"version":3,"sources":["tcp-server.js"],"names":[],"mappings":";;;;;QAUgB,KAAK,GAAL,KAAK;QAiEL,SAAS,GAAT,SAAS;;;;;;;;IAzEb,WAAW;;;;;;;;AAIvB,MAAM,MAAM,GAAG,+BAAkB,YAAY,EAAE,sBAAS,GAAG,CAAC,CAAC;;AAE7D,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;;AAEnB,SAAS,KAAK,CAAC,MAAM,EAAE;AAC1B,UAAM,MAAM,GAAG,uBAAa,MAAM,IAAI;AAClC,cAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAChC,YAAI,GAAG,CAAC;AACR,YAAI,YAAY,CAAC;;AAEjB,cAAM,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM;AACnB,kBAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACnC,gBAAI,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,EAAE;AAC3C,uBAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACvB;;AAED,kBAAM,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC5C,gBAAI,CAAC,SAAS,EAAE;AACZ,sBAAM,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;aACvC,MAAM;AACH,2BAAW,CAAC,UAAU,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACvC,0CAAU,mBAAmB,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;aACjD;;AAED,gBAAI,YAAY,EAAE;AACd,6BAAa,CAAC,YAAY,CAAC,CAAC;aAC/B;SACJ,CAAC,CAAC;;AAEH,cAAM,UAAU,GAAG,gCAAa,MAAM,CAAC,CAAC;;AAExC,oBAAY,GAAG,WAAW,CAAC,MAAM,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;;AAE5E,kBAAU,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,IAAI;AAC1B,gBAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;AACtB,sBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AAC9B,uBAAO;aACV;;AAED,kBAAM,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACnC,gBAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;AACvB,mBAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACf,uBAAO,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;;AAEzC,sBAAM,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjD,oBAAI,CAAC,SAAS,EAAE;AACZ,0BAAM,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AACpC,+BAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;iBAChC,MAAM;AACH,+BAAW,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;AACvD,8CAAU,kBAAkB,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;iBAChD;AACD,uBAAO;aACV;;AAED,kBAAM,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC5C,gBAAI,CAAC,SAAS,EAAE;AACZ,uBAAO;aACV;;AAED,kBAAM,CAAC,IAAI,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAAC;SAC1D,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,UAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,MAAM;AAC7C,cAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;KACnE,CAAC,CAAC;CACN;;AAEM,SAAS,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE;AAChC,UAAM,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC1C,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI;AAC3C,YAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AAClB,mBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3C;KACJ,CAAC,CAAC;CACN","file":"tcp-server.js","sourcesContent":["import { createServer } from 'net';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport * as raspberries from './data/raspberries';\nimport { broadcast } from './websocket';\nimport { createStream } from 'objectstream';\n\nconst logger = new ConsoleLogger('tcp-server', LogLevel.ALL);\n\nconst clients = new Map();\n\nexport function start(config) {\n    const server = createServer(socket => {\n        logger.info('client connected');\n        let mac;\n        let pingInterval;\n\n        socket.on('end', () => {\n            logger.info('client disconnected');\n            if (mac && clients.get(mac).socket === socket) {\n                clients.delete(mac);\n            }\n\n            const raspberry = raspberries.getByMac(mac);\n            if (!raspberry) {\n                logger.warn('unknown mac', { mac });\n            } else {\n                raspberries.setOffline(raspberry, mac);\n                broadcast('raspberry offline', { raspberry });\n            }\n\n            if (pingInterval) {\n                clearInterval(pingInterval);\n            }\n        });\n\n        const jsonStream = createStream(socket);\n\n        pingInterval = setInterval(() => jsonStream.write({ type: 'ping' }), 10000);\n\n        jsonStream.on('data', data => {\n            if (data.type === 'ping') {\n                logger.debug('ping', { mac });\n                return;\n            }\n\n            logger.info('data', { mac, data });\n            if (data.type === 'hello') {\n                mac = data.mac;\n                clients.set(mac, { socket, jsonStream });\n\n                const raspberry = raspberries.getByMac(data.mac);\n                if (!raspberry) {\n                    logger.warn('unknown mac', { mac });\n                    raspberries.addUnknown(data);\n                } else {\n                    raspberries.setOnline(raspberry, { mac, ip: data.ip });\n                    broadcast('raspberry online', { raspberry });\n                }\n                return;\n            }\n\n            const raspberry = raspberries.getByMac(mac);\n            if (!raspberry) {\n                return;\n            }\n\n            logger.warn('unsupported instruction by client', data);\n        });\n    });\n\n    server.listen(config.get('tcpSocketPort'), () => {\n        logger.info('Listening', { port: config.get('tcpSocketPort') });\n    });\n}\n\nexport function writeById(id, data) {\n    const raspberry = raspberries.getById(id);\n    Object.keys(raspberry.networks).forEach(mac => {\n        if (clients.has(mac)) {\n            clients.get(mac).jsonStream.write(data);\n        }\n    });\n}\n"],"sourceRoot":"/"}